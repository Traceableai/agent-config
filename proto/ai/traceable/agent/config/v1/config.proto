syntax = "proto3";

package ai.traceable.agent.config.v1;

import "google/protobuf/wrappers.proto";

option go_package = "github.com/Traceableai/agent-config/gen/go/v1";

message LibtraceableConfig {
  google.protobuf.BoolValue enabled = 1;
  google.protobuf.BoolValue debug_log = 2;
  google.protobuf.StringValue service_name = 3;
  RemoteConfig remote_config = 4;
  BlockingConfig blocking_config = 5;
  ApiDiscoveryConfig api_discovery_config = 6;
  SamplingConfig sampling_config = 7;
}

// Opa covers the options related to the mechanics for getting Open Policy Agent configuration file.
// The client should use secure and token option from reporting settings.
message OpaConfig {
  // endpoint represents the endpoint for polling OPA config file e.g. http://opa.traceableai:8181/
  google.protobuf.StringValue endpoint = 1;

  // poll period in seconds to query OPA service
  google.protobuf.Int32Value poll_period_seconds  = 2;

  // Certificate filename containing the CA to verify the server's certificate.
  // If this is non-empty, you shoulds `https` for the protocol in `endpoint` above. 
  google.protobuf.StringValue cert_file = 3;
}

// Blocking config
message BlockingConfig {
  google.protobuf.BoolValue enabled = 1;
  OpaConfig opa_config = 2;
  ModsecurityConfig modsecurity = 3;
  google.protobuf.BoolValue evaluate_body = 4;
  RegionBlockingConfig region_blocking = 5;

  // when `true`, blocking evaluation will be skipped for internal requests i.e. requests coming
  // from private IPs
  google.protobuf.BoolValue skip_internal_request = 6;
}

message ModsecurityConfig {
  google.protobuf.BoolValue enabled = 1;
}

message RegionBlockingConfig {
  google.protobuf.BoolValue enabled = 1;
}

// RemoteConfig defines the remote endpoint where the config is fetched from
message RemoteConfig {
  // enabled denotes if config needs to be fetched from remote or not
  google.protobuf.BoolValue enabled = 1;
  // endpoint denotes the agentmanager endpoint to connect to for config. eg: localhost:5441
  google.protobuf.StringValue endpoint = 2;
  // poll period in seconds to query for config updates
  google.protobuf.Int32Value poll_period_seconds = 3;
  // Certificate filename containing the CA to verify the server's certificate.
  google.protobuf.StringValue cert_file = 4;
}

message ApiDiscoveryConfig {
  google.protobuf.BoolValue enabled = 1;
}

message SamplingConfig {
  google.protobuf.BoolValue enabled = 1;
}