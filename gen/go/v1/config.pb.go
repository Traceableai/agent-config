// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: ai/traceable/agent/config/v1/config.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LogMode int32

const (
	LogMode_LOG_MODE_UNSPECIFIED LogMode = 0
	LogMode_LOG_MODE_NONE        LogMode = 1
	LogMode_LOG_MODE_STDOUT      LogMode = 2
	LogMode_LOG_MODE_FILE        LogMode = 3
)

// Enum value maps for LogMode.
var (
	LogMode_name = map[int32]string{
		0: "LOG_MODE_UNSPECIFIED",
		1: "LOG_MODE_NONE",
		2: "LOG_MODE_STDOUT",
		3: "LOG_MODE_FILE",
	}
	LogMode_value = map[string]int32{
		"LOG_MODE_UNSPECIFIED": 0,
		"LOG_MODE_NONE":        1,
		"LOG_MODE_STDOUT":      2,
		"LOG_MODE_FILE":        3,
	}
)

func (x LogMode) Enum() *LogMode {
	p := new(LogMode)
	*p = x
	return p
}

func (x LogMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogMode) Descriptor() protoreflect.EnumDescriptor {
	return file_ai_traceable_agent_config_v1_config_proto_enumTypes[0].Descriptor()
}

func (LogMode) Type() protoreflect.EnumType {
	return &file_ai_traceable_agent_config_v1_config_proto_enumTypes[0]
}

func (x LogMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogMode.Descriptor instead.
func (LogMode) EnumDescriptor() ([]byte, []int) {
	return file_ai_traceable_agent_config_v1_config_proto_rawDescGZIP(), []int{0}
}

type LogLevel int32

const (
	LogLevel_LOG_LEVEL_UNSPECIFIED LogLevel = 0
	LogLevel_LOG_LEVEL_TRACE       LogLevel = 1
	LogLevel_LOG_LEVEL_DEBUG       LogLevel = 2
	LogLevel_LOG_LEVEL_INFO        LogLevel = 3
	LogLevel_LOG_LEVEL_WARN        LogLevel = 4
	LogLevel_LOG_LEVEL_ERROR       LogLevel = 5
	LogLevel_LOG_LEVEL_CRITICAL    LogLevel = 6
)

// Enum value maps for LogLevel.
var (
	LogLevel_name = map[int32]string{
		0: "LOG_LEVEL_UNSPECIFIED",
		1: "LOG_LEVEL_TRACE",
		2: "LOG_LEVEL_DEBUG",
		3: "LOG_LEVEL_INFO",
		4: "LOG_LEVEL_WARN",
		5: "LOG_LEVEL_ERROR",
		6: "LOG_LEVEL_CRITICAL",
	}
	LogLevel_value = map[string]int32{
		"LOG_LEVEL_UNSPECIFIED": 0,
		"LOG_LEVEL_TRACE":       1,
		"LOG_LEVEL_DEBUG":       2,
		"LOG_LEVEL_INFO":        3,
		"LOG_LEVEL_WARN":        4,
		"LOG_LEVEL_ERROR":       5,
		"LOG_LEVEL_CRITICAL":    6,
	}
)

func (x LogLevel) Enum() *LogLevel {
	p := new(LogLevel)
	*p = x
	return p
}

func (x LogLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_ai_traceable_agent_config_v1_config_proto_enumTypes[1].Descriptor()
}

func (LogLevel) Type() protoreflect.EnumType {
	return &file_ai_traceable_agent_config_v1_config_proto_enumTypes[1]
}

func (x LogLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogLevel.Descriptor instead.
func (LogLevel) EnumDescriptor() ([]byte, []int) {
	return file_ai_traceable_agent_config_v1_config_proto_rawDescGZIP(), []int{1}
}

type SpanType int32

const (
	SpanType_SPAN_TYPE_UNSPECIFIED SpanType = 0
	SpanType_SPAN_TYPE_NO_SPAN     SpanType = 1
	SpanType_SPAN_TYPE_BARE_SPAN   SpanType = 2
	SpanType_SPAN_TYPE_FULL_SPAN   SpanType = 3
)

// Enum value maps for SpanType.
var (
	SpanType_name = map[int32]string{
		0: "SPAN_TYPE_UNSPECIFIED",
		1: "SPAN_TYPE_NO_SPAN",
		2: "SPAN_TYPE_BARE_SPAN",
		3: "SPAN_TYPE_FULL_SPAN",
	}
	SpanType_value = map[string]int32{
		"SPAN_TYPE_UNSPECIFIED": 0,
		"SPAN_TYPE_NO_SPAN":     1,
		"SPAN_TYPE_BARE_SPAN":   2,
		"SPAN_TYPE_FULL_SPAN":   3,
	}
)

func (x SpanType) Enum() *SpanType {
	p := new(SpanType)
	*p = x
	return p
}

func (x SpanType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpanType) Descriptor() protoreflect.EnumDescriptor {
	return file_ai_traceable_agent_config_v1_config_proto_enumTypes[2].Descriptor()
}

func (SpanType) Type() protoreflect.EnumType {
	return &file_ai_traceable_agent_config_v1_config_proto_enumTypes[2]
}

func (x SpanType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpanType.Descriptor instead.
func (SpanType) EnumDescriptor() ([]byte, []int) {
	return file_ai_traceable_agent_config_v1_config_proto_rawDescGZIP(), []int{2}
}

// PropagationFormat represents the propagation formats supported by agents
type PropagationFormat int32

const (
	// B3 propagation format, agents should support both multi and single value formats
	// see https://github.com/openzipkin/b3-propagation
	PropagationFormat_B3 PropagationFormat = 0
	// W3C Propagation format
	// see https://www.w3.org/TR/trace-context/
	PropagationFormat_TRACECONTEXT PropagationFormat = 1
)

// Enum value maps for PropagationFormat.
var (
	PropagationFormat_name = map[int32]string{
		0: "B3",
		1: "TRACECONTEXT",
	}
	PropagationFormat_value = map[string]int32{
		"B3":           0,
		"TRACECONTEXT": 1,
	}
)

func (x PropagationFormat) Enum() *PropagationFormat {
	p := new(PropagationFormat)
	*p = x
	return p
}

func (x PropagationFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PropagationFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_ai_traceable_agent_config_v1_config_proto_enumTypes[3].Descriptor()
}

func (PropagationFormat) Type() protoreflect.EnumType {
	return &file_ai_traceable_agent_config_v1_config_proto_enumTypes[3]
}

func (x PropagationFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PropagationFormat.Descriptor instead.
func (PropagationFormat) EnumDescriptor() ([]byte, []int) {
	return file_ai_traceable_agent_config_v1_config_proto_rawDescGZIP(), []int{3}
}

// TraceReporterType represents the reporting format for trace data.
type TraceReporterType int32

const (
	// Default to none. Agent will use it's default reporting type
	TraceReporterType_UNSPECIFIED TraceReporterType = 0
	// Zipkin protobuf reporting format.
	// see https://github.com/openzipkin/zipkin-api
	TraceReporterType_ZIPKIN TraceReporterType = 1
	// OpenTelemetry protobuf reporting format.
	// see https://github.com/open-telemetry/opentelemetry-proto
	TraceReporterType_OTLP TraceReporterType = 2
	// Logging reporting format
	TraceReporterType_LOGGING TraceReporterType = 3
	// Disable trace reporting
	TraceReporterType_NONE TraceReporterType = 4
	// OTLP over http
	TraceReporterType_OTLP_HTTP TraceReporterType = 5
)

// Enum value maps for TraceReporterType.
var (
	TraceReporterType_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "ZIPKIN",
		2: "OTLP",
		3: "LOGGING",
		4: "NONE",
		5: "OTLP_HTTP",
	}
	TraceReporterType_value = map[string]int32{
		"UNSPECIFIED": 0,
		"ZIPKIN":      1,
		"OTLP":        2,
		"LOGGING":     3,
		"NONE":        4,
		"OTLP_HTTP":   5,
	}
)

func (x TraceReporterType) Enum() *TraceReporterType {
	p := new(TraceReporterType)
	*p = x
	return p
}

func (x TraceReporterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TraceReporterType) Descriptor() protoreflect.EnumDescriptor {
	return file_ai_traceable_agent_config_v1_config_proto_enumTypes[4].Descriptor()
}

func (TraceReporterType) Type() protoreflect.EnumType {
	return &file_ai_traceable_agent_config_v1_config_proto_enumTypes[4]
}

func (x TraceReporterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TraceReporterType.Descriptor instead.
func (TraceReporterType) EnumDescriptor() ([]byte, []int) {
	return file_ai_traceable_agent_config_v1_config_proto_rawDescGZIP(), []int{4}
}

// MetricReporterType represents the reporting format for metric data.
type MetricReporterType int32

const (
	// Default to none. Agent will use it's default reporting type
	MetricReporterType_METRIC_REPORTER_TYPE_UNSPECIFIED MetricReporterType = 0
	// OpenTelemetry protobuf reporting format.
	// see https://github.com/open-telemetry/opentelemetry-proto
	MetricReporterType_METRIC_REPORTER_TYPE_OTLP MetricReporterType = 1
	// Prometheus exposition format.
	// see https://github.com/prometheus/docs/blob/main/content/docs/instrumenting/exposition_formats.md
	MetricReporterType_METRIC_REPORTER_TYPE_PROMETHEUS MetricReporterType = 2
	// Logging reporting format
	MetricReporterType_METRIC_REPORTER_TYPE_LOGGING MetricReporterType = 3
	// Disable metric reporting
	MetricReporterType_METRIC_REPORTER_TYPE_NONE MetricReporterType = 4
)

// Enum value maps for MetricReporterType.
var (
	MetricReporterType_name = map[int32]string{
		0: "METRIC_REPORTER_TYPE_UNSPECIFIED",
		1: "METRIC_REPORTER_TYPE_OTLP",
		2: "METRIC_REPORTER_TYPE_PROMETHEUS",
		3: "METRIC_REPORTER_TYPE_LOGGING",
		4: "METRIC_REPORTER_TYPE_NONE",
	}
	MetricReporterType_value = map[string]int32{
		"METRIC_REPORTER_TYPE_UNSPECIFIED": 0,
		"METRIC_REPORTER_TYPE_OTLP":        1,
		"METRIC_REPORTER_TYPE_PROMETHEUS":  2,
		"METRIC_REPORTER_TYPE_LOGGING":     3,
		"METRIC_REPORTER_TYPE_NONE":        4,
	}
)

func (x MetricReporterType) Enum() *MetricReporterType {
	p := new(MetricReporterType)
	*p = x
	return p
}

func (x MetricReporterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetricReporterType) Descriptor() protoreflect.EnumDescriptor {
	return file_ai_traceable_agent_config_v1_config_proto_enumTypes[5].Descriptor()
}

func (MetricReporterType) Type() protoreflect.EnumType {
	return &file_ai_traceable_agent_config_v1_config_proto_enumTypes[5]
}

func (x MetricReporterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MetricReporterType.Descriptor instead.
func (MetricReporterType) EnumDescriptor() ([]byte, []int) {
	return file_ai_traceable_agent_config_v1_config_proto_rawDescGZIP(), []int{5}
}

type AgentConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Marked as deprecated in ai/traceable/agent/config/v1/config.proto.
	Opa            *Opa            `protobuf:"bytes,1,opt,name=opa,proto3" json:"opa,omitempty"`
	BlockingConfig *BlockingConfig `protobuf:"bytes,2,opt,name=blocking_config,json=blockingConfig,proto3" json:"blocking_config,omitempty"`
	// Deprecated: Marked as deprecated in ai/traceable/agent/config/v1/config.proto.
	DebugLog     *wrapperspb.BoolValue `protobuf:"bytes,3,opt,name=debug_log,json=debugLog,proto3" json:"debug_log,omitempty"`
	RemoteConfig *RemoteConfig         `protobuf:"bytes,4,opt,name=remote_config,json=remoteConfig,proto3" json:"remote_config,omitempty"`
	// Deprecated: Marked as deprecated in ai/traceable/agent/config/v1/config.proto.
	ApiDiscovery *ApiDiscoveryConfig `protobuf:"bytes,5,opt,name=api_discovery,json=apiDiscovery,proto3" json:"api_discovery,omitempty"`
	Sampling     *SamplingConfig     `protobuf:"bytes,6,opt,name=sampling,proto3" json:"sampling,omitempty"`
	// javaagent has the configs specific to javaagent
	Javaagent     *Javaagent     `protobuf:"bytes,7,opt,name=javaagent,proto3" json:"javaagent,omitempty"`
	Logging       *LogConfig     `protobuf:"bytes,8,opt,name=logging,proto3" json:"logging,omitempty"`
	MetricsConfig *MetricsConfig `protobuf:"bytes,9,opt,name=metrics_config,json=metricsConfig,proto3" json:"metrics_config,omitempty"`
	// represents the environment name of agent
	Environment *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=environment,proto3" json:"environment,omitempty"`
	// From HT config
	ServiceName *wrapperspb.StringValue `protobuf:"bytes,11,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// reporting holds the reporting settings for the agent
	Reporting *Reporting `protobuf:"bytes,12,opt,name=reporting,proto3" json:"reporting,omitempty"`
	// data_capture describes the data being captured by instrumentation
	DataCapture *DataCapture `protobuf:"bytes,13,opt,name=data_capture,json=dataCapture,proto3" json:"data_capture,omitempty"`
	// propagation_formats list the supported propagation formats
	PropagationFormats []PropagationFormat `protobuf:"varint,14,rep,packed,name=propagation_formats,json=propagationFormats,proto3,enum=ai.traceable.agent.config.v1.PropagationFormat" json:"propagation_formats,omitempty"`
	// when `false`, disables the agent
	Enabled *wrapperspb.BoolValue `protobuf:"bytes,15,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// resource_attributes map define the static list of resources which is configured on the tracer
	ResourceAttributes map[string]string `protobuf:"bytes,16,rep,name=resource_attributes,json=resourceAttributes,proto3" json:"resource_attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// telemetry
	Telemetry *Telemetry `protobuf:"bytes,17,opt,name=telemetry,proto3" json:"telemetry,omitempty"`
	// Goagent specific config
	Goagent *GoAgent `protobuf:"bytes,18,opt,name=goagent,proto3" json:"goagent,omitempty"`
}

func (x *AgentConfig) Reset() {
	*x = AgentConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_traceable_agent_config_v1_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentConfig) ProtoMessage() {}

func (x *AgentConfig) ProtoReflect() protoreflect.Message {
	mi := &file_ai_traceable_agent_config_v1_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentConfig.ProtoReflect.Descriptor instead.
func (*AgentConfig) Descriptor() ([]byte, []int) {
	return file_ai_traceable_agent_config_v1_config_proto_rawDescGZIP(), []int{0}
}

// Deprecated: Marked as deprecated in ai/traceable/agent/config/v1/config.proto.
func (x *AgentConfig) GetOpa() *Opa {
	if x != nil {
		return x.Opa
	}
	return nil
}

func (x *AgentConfig) GetBlockingConfig() *BlockingConfig {
	if x != nil {
		return x.BlockingConfig
	}
	return nil
}

// Deprecated: Marked as deprecated in ai/traceable/agent/config/v1/config.proto.
func (x *AgentConfig) GetDebugLog() *wrapperspb.BoolValue {
	if x != nil {
		return x.DebugLog
	}
	return nil
}

func (x *AgentConfig) GetRemoteConfig() *RemoteConfig {
	if x != nil {
		return x.RemoteConfig
	}
	return nil
}

// Deprecated: Marked as deprecated in ai/traceable/agent/config/v1/config.proto.
func (x *AgentConfig) GetApiDiscovery() *ApiDiscoveryConfig {
	if x != nil {
		return x.ApiDiscovery
	}
	return nil
}

func (x *AgentConfig) GetSampling() *SamplingConfig {
	if x != nil {
		return x.Sampling
	}
	return nil
}

func (x *AgentConfig) GetJavaagent() *Javaagent {
	if x != nil {
		return x.Javaagent
	}
	return nil
}

func (x *AgentConfig) GetLogging() *LogConfig {
	if x != nil {
		return x.Logging
	}
	return nil
}

func (x *AgentConfig) GetMetricsConfig() *MetricsConfig {
	if x != nil {
		return x.MetricsConfig
	}
	return nil
}

func (x *AgentConfig) GetEnvironment() *wrapperspb.StringValue {
	if x != nil {
		return x.Environment
	}
	return nil
}

func (x *AgentConfig) GetServiceName() *wrapperspb.StringValue {
	if x != nil {
		return x.ServiceName
	}
	return nil
}

func (x *AgentConfig) GetReporting() *Reporting {
	if x != nil {
		return x.Reporting
	}
	return nil
}

func (x *AgentConfig) GetDataCapture() *DataCapture {
	if x != nil {
		return x.DataCapture
	}
	return nil
}

func (x *AgentConfig) GetPropagationFormats() []PropagationFormat {
	if x != nil {
		return x.PropagationFormats
	}
	return nil
}

func (x *AgentConfig) GetEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *AgentConfig) GetResourceAttributes() map[string]string {
	if x != nil {
		return x.ResourceAttributes
	}
	return nil
}

func (x *AgentConfig) GetTelemetry() *Telemetry {
	if x != nil {
		return x.Telemetry
	}
	return nil
}

func (x *AgentConfig) GetGoagent() *GoAgent {
	if x != nil {
		return x.Goagent
	}
	return nil
}

// Reporting covers the options related to the mechanics for sending data to the
// tracing server o collector.
type Reporting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// endpoint represents the endpoint for reporting the traces
	// For ZIPKIN reporter type use http://api.traceable.ai:9411/api/v2/spans
	// For OTLP reporter type use http://api.traceable.ai:4317
	Endpoint *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// when `true`, connects to endpoints over TLS.
	Secure *wrapperspb.BoolValue `protobuf:"bytes,2,opt,name=secure,proto3" json:"secure,omitempty"`
	// user specific token to access Traceable API
	Token *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	// reporter type for traces.
	TraceReporterType TraceReporterType `protobuf:"varint,5,opt,name=trace_reporter_type,json=traceReporterType,proto3,enum=ai.traceable.agent.config.v1.TraceReporterType" json:"trace_reporter_type,omitempty"`
	// Certificate file containing the CA to verify the server's certificate.
	// This is for private certificates.
	// If this is set then `secure` above should also be set to `true`.
	CertFile *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=cert_file,json=certFile,proto3" json:"cert_file,omitempty"`
	// metric_endpoint represents the endpoint for reporting the metrics.
	// For OTLP metric reporter type use http://api.traceable.ai:4317
	MetricEndpoint *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=metric_endpoint,json=metricEndpoint,proto3" json:"metric_endpoint,omitempty"`
	// reporter type for metrics.
	MetricReporterType MetricReporterType `protobuf:"varint,8,opt,name=metric_reporter_type,json=metricReporterType,proto3,enum=ai.traceable.agent.config.v1.MetricReporterType" json:"metric_reporter_type,omitempty"`
	// When `true`, modifies grpc resolver to use dns instead of passthrough and configure round robin client side loadbalancing
	EnableGrpcLoadbalancing *wrapperspb.BoolValue `protobuf:"bytes,9,opt,name=enable_grpc_loadbalancing,json=enableGrpcLoadbalancing,proto3" json:"enable_grpc_loadbalancing,omitempty"`
	// represents the agent token to be used by the agent
	AgentToken *wrapperspb.StringValue `protobuf:"bytes,11,opt,name=agent_token,json=agentToken,proto3" json:"agent_token,omitempty"`
}

func (x *Reporting) Reset() {
	*x = Reporting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_traceable_agent_config_v1_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reporting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reporting) ProtoMessage() {}

func (x *Reporting) ProtoReflect() protoreflect.Message {
	mi := &file_ai_traceable_agent_config_v1_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reporting.ProtoReflect.Descriptor instead.
func (*Reporting) Descriptor() ([]byte, []int) {
	return file_ai_traceable_agent_config_v1_config_proto_rawDescGZIP(), []int{1}
}

func (x *Reporting) GetEndpoint() *wrapperspb.StringValue {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

func (x *Reporting) GetSecure() *wrapperspb.BoolValue {
	if x != nil {
		return x.Secure
	}
	return nil
}

func (x *Reporting) GetToken() *wrapperspb.StringValue {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *Reporting) GetTraceReporterType() TraceReporterType {
	if x != nil {
		return x.TraceReporterType
	}
	return TraceReporterType_UNSPECIFIED
}

func (x *Reporting) GetCertFile() *wrapperspb.StringValue {
	if x != nil {
		return x.CertFile
	}
	return nil
}

func (x *Reporting) GetMetricEndpoint() *wrapperspb.StringValue {
	if x != nil {
		return x.MetricEndpoint
	}
	return nil
}

func (x *Reporting) GetMetricReporterType() MetricReporterType {
	if x != nil {
		return x.MetricReporterType
	}
	return MetricReporterType_METRIC_REPORTER_TYPE_UNSPECIFIED
}

func (x *Reporting) GetEnableGrpcLoadbalancing() *wrapperspb.BoolValue {
	if x != nil {
		return x.EnableGrpcLoadbalancing
	}
	return nil
}

func (x *Reporting) GetAgentToken() *wrapperspb.StringValue {
	if x != nil {
		return x.AgentToken
	}
	return nil
}

// Opa covers the options related to the mechanics for getting Open Policy Agent configuration file.
// The client should use secure and token option from reporting settings.
type Opa struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// when `true` Open Policy Agent evaluation is enabled to block request
	Enabled *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// endpoint represents the endpoint for polling OPA config file e.g. http://opa.traceableai:8181/
	Endpoint *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// poll period in seconds to query OPA service
	PollPeriodSeconds *wrapperspb.Int32Value `protobuf:"bytes,3,opt,name=poll_period_seconds,json=pollPeriodSeconds,proto3" json:"poll_period_seconds,omitempty"`
	// Certificate filename containing the CA to verify the server's certificate.
	// If this is non-empty, you shoulds `https` for the protocol in `endpoint` above.
	CertFile *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=cert_file,json=certFile,proto3" json:"cert_file,omitempty"`
	// set this flag to use https connection when the provided certificate path is empty
	UseSecureConnection *wrapperspb.BoolValue `protobuf:"bytes,5,opt,name=use_secure_connection,json=useSecureConnection,proto3" json:"use_secure_connection,omitempty"`
}

func (x *Opa) Reset() {
	*x = Opa{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_traceable_agent_config_v1_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Opa) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Opa) ProtoMessage() {}

func (x *Opa) ProtoReflect() protoreflect.Message {
	mi := &file_ai_traceable_agent_config_v1_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Opa.ProtoReflect.Descriptor instead.
func (*Opa) Descriptor() ([]byte, []int) {
	return file_ai_traceable_agent_config_v1_config_proto_rawDescGZIP(), []int{2}
}

func (x *Opa) GetEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *Opa) GetEndpoint() *wrapperspb.StringValue {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

func (x *Opa) GetPollPeriodSeconds() *wrapperspb.Int32Value {
	if x != nil {
		return x.PollPeriodSeconds
	}
	return nil
}

func (x *Opa) GetCertFile() *wrapperspb.StringValue {
	if x != nil {
		return x.CertFile
	}
	return nil
}

func (x *Opa) GetUseSecureConnection() *wrapperspb.BoolValue {
	if x != nil {
		return x.UseSecureConnection
	}
	return nil
}

// Blocking config
type BlockingConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// debug_log has moved to top level
	//
	// Deprecated: Marked as deprecated in ai/traceable/agent/config/v1/config.proto.
	DebugLog       *wrapperspb.BoolValue `protobuf:"bytes,2,opt,name=debug_log,json=debugLog,proto3" json:"debug_log,omitempty"`
	Modsecurity    *ModsecurityConfig    `protobuf:"bytes,3,opt,name=modsecurity,proto3" json:"modsecurity,omitempty"`
	EvaluateBody   *wrapperspb.BoolValue `protobuf:"bytes,4,opt,name=evaluate_body,json=evaluateBody,proto3" json:"evaluate_body,omitempty"`
	RegionBlocking *RegionBlockingConfig `protobuf:"bytes,5,opt,name=region_blocking,json=regionBlocking,proto3" json:"region_blocking,omitempty"`
	// remote_config has moved to top level
	//
	// Deprecated: Marked as deprecated in ai/traceable/agent/config/v1/config.proto.
	RemoteConfig *RemoteConfig `protobuf:"bytes,6,opt,name=remote_config,json=remoteConfig,proto3" json:"remote_config,omitempty"`
	// when `true`, blocking evaluation will be skipped for internal requests i.e. requests coming
	// from private IPs
	SkipInternalRequest *wrapperspb.BoolValue `protobuf:"bytes,7,opt,name=skip_internal_request,json=skipInternalRequest,proto3" json:"skip_internal_request,omitempty"`
	// Allows user to set a custom blocking status code value
	ResponseStatusCode *wrapperspb.Int32Value `protobuf:"bytes,8,opt,name=response_status_code,json=responseStatusCode,proto3" json:"response_status_code,omitempty"`
	// setting a maximum allowed depth for recursion while parsing combination policies
	MaxRecursionDepth *wrapperspb.Int32Value `protobuf:"bytes,9,opt,name=max_recursion_depth,json=maxRecursionDepth,proto3" json:"max_recursion_depth,omitempty"`
	// Allows user to set a custom blocking message
	ResponseMessage *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=response_message,json=responseMessage,proto3" json:"response_message,omitempty"`
	// EdgeDecisionService based evaluator configuration
	EdgeDecisionService *EdgeDecisionServiceConfig `protobuf:"bytes,11,opt,name=edge_decision_service,json=edgeDecisionService,proto3" json:"edge_decision_service,omitempty"`
}

func (x *BlockingConfig) Reset() {
	*x = BlockingConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_traceable_agent_config_v1_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockingConfig) ProtoMessage() {}

func (x *BlockingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_ai_traceable_agent_config_v1_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockingConfig.ProtoReflect.Descriptor instead.
func (*BlockingConfig) Descriptor() ([]byte, []int) {
	return file_ai_traceable_agent_config_v1_config_proto_rawDescGZIP(), []int{3}
}

func (x *BlockingConfig) GetEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

// Deprecated: Marked as deprecated in ai/traceable/agent/config/v1/config.proto.
func (x *BlockingConfig) GetDebugLog() *wrapperspb.BoolValue {
	if x != nil {
		return x.DebugLog
	}
	return nil
}

func (x *BlockingConfig) GetModsecurity() *ModsecurityConfig {
	if x != nil {
		return x.Modsecurity
	}
	return nil
}

func (x *BlockingConfig) GetEvaluateBody() *wrapperspb.BoolValue {
	if x != nil {
		return x.EvaluateBody
	}
	return nil
}

func (x *BlockingConfig) GetRegionBlocking() *RegionBlockingConfig {
	if x != nil {
		return x.RegionBlocking
	}
	return nil
}

// Deprecated: Marked as deprecated in ai/traceable/agent/config/v1/config.proto.
func (x *BlockingConfig) GetRemoteConfig() *RemoteConfig {
	if x != nil {
		return x.RemoteConfig
	}
	return nil
}

func (x *BlockingConfig) GetSkipInternalRequest() *wrapperspb.BoolValue {
	if x != nil {
		return x.SkipInternalRequest
	}
	return nil
}

func (x *BlockingConfig) GetResponseStatusCode() *wrapperspb.Int32Value {
	if x != nil {
		return x.ResponseStatusCode
	}
	return nil
}

func (x *BlockingConfig) GetMaxRecursionDepth() *wrapperspb.Int32Value {
	if x != nil {
		return x.MaxRecursionDepth
	}
	return nil
}

func (x *BlockingConfig) GetResponseMessage() *wrapperspb.StringValue {
	if x != nil {
		return x.ResponseMessage
	}
	return nil
}

func (x *BlockingConfig) GetEdgeDecisionService() *EdgeDecisionServiceConfig {
	if x != nil {
		return x.EdgeDecisionService
	}
	return nil
}

type ModsecurityConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *ModsecurityConfig) Reset() {
	*x = ModsecurityConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_traceable_agent_config_v1_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModsecurityConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModsecurityConfig) ProtoMessage() {}

func (x *ModsecurityConfig) ProtoReflect() protoreflect.Message {
	mi := &file_ai_traceable_agent_config_v1_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModsecurityConfig.ProtoReflect.Descriptor instead.
func (*ModsecurityConfig) Descriptor() ([]byte, []int) {
	return file_ai_traceable_agent_config_v1_config_proto_rawDescGZIP(), []int{4}
}

func (x *ModsecurityConfig) GetEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

type RegionBlockingConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *RegionBlockingConfig) Reset() {
	*x = RegionBlockingConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_traceable_agent_config_v1_config_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegionBlockingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionBlockingConfig) ProtoMessage() {}

func (x *RegionBlockingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_ai_traceable_agent_config_v1_config_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionBlockingConfig.ProtoReflect.Descriptor instead.
func (*RegionBlockingConfig) Descriptor() ([]byte, []int) {
	return file_ai_traceable_agent_config_v1_config_proto_rawDescGZIP(), []int{5}
}

func (x *RegionBlockingConfig) GetEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

// RemoteConfig defines the remote endpoint where the config is fetched from
type RemoteConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// enabled denotes if config needs to be fetched from remote or not
	Enabled *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// endpoint denotes the agentmanager endpoint to connect to for config. eg: localhost:5441
	Endpoint *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// poll period in seconds to query for config updates
	PollPeriodSeconds *wrapperspb.Int32Value `protobuf:"bytes,3,opt,name=poll_period_seconds,json=pollPeriodSeconds,proto3" json:"poll_period_seconds,omitempty"`
	// Certificate filename containing the CA to verify the server's certificate.
	CertFile               *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=cert_file,json=certFile,proto3" json:"cert_file,omitempty"`
	GrpcMaxCallRecvMsgSize *wrapperspb.Int32Value  `protobuf:"bytes,5,opt,name=grpc_max_call_recv_msg_size,json=grpcMaxCallRecvMsgSize,proto3" json:"grpc_max_call_recv_msg_size,omitempty"`
	// set this flag to use https connection when the provided certificate path is empty
	UseSecureConnection *wrapperspb.BoolValue `protobuf:"bytes,6,opt,name=use_secure_connection,json=useSecureConnection,proto3" json:"use_secure_connection,omitempty"`
}

func (x *RemoteConfig) Reset() {
	*x = RemoteConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_traceable_agent_config_v1_config_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteConfig) ProtoMessage() {}

func (x *RemoteConfig) ProtoReflect() protoreflect.Message {
	mi := &file_ai_traceable_agent_config_v1_config_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteConfig.ProtoReflect.Descriptor instead.
func (*RemoteConfig) Descriptor() ([]byte, []int) {
	return file_ai_traceable_agent_config_v1_config_proto_rawDescGZIP(), []int{6}
}

func (x *RemoteConfig) GetEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *RemoteConfig) GetEndpoint() *wrapperspb.StringValue {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

func (x *RemoteConfig) GetPollPeriodSeconds() *wrapperspb.Int32Value {
	if x != nil {
		return x.PollPeriodSeconds
	}
	return nil
}

func (x *RemoteConfig) GetCertFile() *wrapperspb.StringValue {
	if x != nil {
		return x.CertFile
	}
	return nil
}

func (x *RemoteConfig) GetGrpcMaxCallRecvMsgSize() *wrapperspb.Int32Value {
	if x != nil {
		return x.GrpcMaxCallRecvMsgSize
	}
	return nil
}

func (x *RemoteConfig) GetUseSecureConnection() *wrapperspb.BoolValue {
	if x != nil {
		return x.UseSecureConnection
	}
	return nil
}

type ApiDiscoveryConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *ApiDiscoveryConfig) Reset() {
	*x = ApiDiscoveryConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_traceable_agent_config_v1_config_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiDiscoveryConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiDiscoveryConfig) ProtoMessage() {}

func (x *ApiDiscoveryConfig) ProtoReflect() protoreflect.Message {
	mi := &file_ai_traceable_agent_config_v1_config_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiDiscoveryConfig.ProtoReflect.Descriptor instead.
func (*ApiDiscoveryConfig) Descriptor() ([]byte, []int) {
	return file_ai_traceable_agent_config_v1_config_proto_rawDescGZIP(), []int{7}
}

func (x *ApiDiscoveryConfig) GetEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

type SamplingConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled                *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	DefaultRateLimitConfig *RateLimitConfig      `protobuf:"bytes,2,opt,name=default_rate_limit_config,json=defaultRateLimitConfig,proto3" json:"default_rate_limit_config,omitempty"`
}

func (x *SamplingConfig) Reset() {
	*x = SamplingConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_traceable_agent_config_v1_config_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SamplingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SamplingConfig) ProtoMessage() {}

func (x *SamplingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_ai_traceable_agent_config_v1_config_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SamplingConfig.ProtoReflect.Descriptor instead.
func (*SamplingConfig) Descriptor() ([]byte, []int) {
	return file_ai_traceable_agent_config_v1_config_proto_rawDescGZIP(), []int{8}
}

func (x *SamplingConfig) GetEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *SamplingConfig) GetDefaultRateLimitConfig() *RateLimitConfig {
	if x != nil {
		return x.DefaultRateLimitConfig
	}
	return nil
}

type Javaagent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// set this flag to export certificates configured in JKS to libtraceable for making HTTPS connection to TPA.
	ImportJksCerts *wrapperspb.BoolValue     `protobuf:"bytes,1,opt,name=import_jks_certs,json=importJksCerts,proto3" json:"import_jks_certs,omitempty"`
	FilterJarPaths []*wrapperspb.StringValue `protobuf:"bytes,2,rep,name=filter_jar_paths,json=filterJarPaths,proto3" json:"filter_jar_paths,omitempty"`
}

func (x *Javaagent) Reset() {
	*x = Javaagent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_traceable_agent_config_v1_config_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Javaagent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Javaagent) ProtoMessage() {}

func (x *Javaagent) ProtoReflect() protoreflect.Message {
	mi := &file_ai_traceable_agent_config_v1_config_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Javaagent.ProtoReflect.Descriptor instead.
func (*Javaagent) Descriptor() ([]byte, []int) {
	return file_ai_traceable_agent_config_v1_config_proto_rawDescGZIP(), []int{9}
}

func (x *Javaagent) GetImportJksCerts() *wrapperspb.BoolValue {
	if x != nil {
		return x.ImportJksCerts
	}
	return nil
}

func (x *Javaagent) GetFilterJarPaths() []*wrapperspb.StringValue {
	if x != nil {
		return x.FilterJarPaths
	}
	return nil
}

type LogConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogMode  LogMode  `protobuf:"varint,1,opt,name=log_mode,json=logMode,proto3,enum=ai.traceable.agent.config.v1.LogMode" json:"log_mode,omitempty"`
	LogLevel LogLevel `protobuf:"varint,2,opt,name=log_level,json=logLevel,proto3,enum=ai.traceable.agent.config.v1.LogLevel" json:"log_level,omitempty"`
	// if mode is LOG_MODE_FILE, provide this additional configuration
	LogFile *LogFileConfig `protobuf:"bytes,3,opt,name=log_file,json=logFile,proto3" json:"log_file,omitempty"`
}

func (x *LogConfig) Reset() {
	*x = LogConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_traceable_agent_config_v1_config_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogConfig) ProtoMessage() {}

func (x *LogConfig) ProtoReflect() protoreflect.Message {
	mi := &file_ai_traceable_agent_config_v1_config_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogConfig.ProtoReflect.Descriptor instead.
func (*LogConfig) Descriptor() ([]byte, []int) {
	return file_ai_traceable_agent_config_v1_config_proto_rawDescGZIP(), []int{10}
}

func (x *LogConfig) GetLogMode() LogMode {
	if x != nil {
		return x.LogMode
	}
	return LogMode_LOG_MODE_UNSPECIFIED
}

func (x *LogConfig) GetLogLevel() LogLevel {
	if x != nil {
		return x.LogLevel
	}
	return LogLevel_LOG_LEVEL_UNSPECIFIED
}

func (x *LogConfig) GetLogFile() *LogFileConfig {
	if x != nil {
		return x.LogFile
	}
	return nil
}

type LogFileConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// maximum number of log files to keep
	MaxFiles *wrapperspb.Int32Value `protobuf:"bytes,1,opt,name=max_files,json=maxFiles,proto3" json:"max_files,omitempty"`
	// maximum file size of the log files. Default value is 10485760 (10MB).
	MaxFileSize *wrapperspb.Int32Value `protobuf:"bytes,2,opt,name=max_file_size,json=maxFileSize,proto3" json:"max_file_size,omitempty"`
	// file path for the log file. Default value is /var/traceable/log/libtraceable.log
	FilePath *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
}

func (x *LogFileConfig) Reset() {
	*x = LogFileConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_traceable_agent_config_v1_config_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogFileConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogFileConfig) ProtoMessage() {}

func (x *LogFileConfig) ProtoReflect() protoreflect.Message {
	mi := &file_ai_traceable_agent_config_v1_config_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogFileConfig.ProtoReflect.Descriptor instead.
func (*LogFileConfig) Descriptor() ([]byte, []int) {
	return file_ai_traceable_agent_config_v1_config_proto_rawDescGZIP(), []int{11}
}

func (x *LogFileConfig) GetMaxFiles() *wrapperspb.Int32Value {
	if x != nil {
		return x.MaxFiles
	}
	return nil
}

func (x *LogFileConfig) GetMaxFileSize() *wrapperspb.Int32Value {
	if x != nil {
		return x.MaxFileSize
	}
	return nil
}

func (x *LogFileConfig) GetFilePath() *wrapperspb.StringValue {
	if x != nil {
		return x.FilePath
	}
	return nil
}

type MetricsLogConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// set this flag to print metrics in logs
	Enabled *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// set the frequency at which metrics should be printed. Examples are '1s', '2m', '3h'. Default value is 30m
	Frequency *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=frequency,proto3" json:"frequency,omitempty"`
}

func (x *MetricsLogConfig) Reset() {
	*x = MetricsLogConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_traceable_agent_config_v1_config_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricsLogConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsLogConfig) ProtoMessage() {}

func (x *MetricsLogConfig) ProtoReflect() protoreflect.Message {
	mi := &file_ai_traceable_agent_config_v1_config_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsLogConfig.ProtoReflect.Descriptor instead.
func (*MetricsLogConfig) Descriptor() ([]byte, []int) {
	return file_ai_traceable_agent_config_v1_config_proto_rawDescGZIP(), []int{12}
}

func (x *MetricsLogConfig) GetEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *MetricsLogConfig) GetFrequency() *wrapperspb.StringValue {
	if x != nil {
		return x.Frequency
	}
	return nil
}

type EndpointMetricsConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// set this flag to enable endpoint level metrics
	Enabled *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// set the max number of endpoints to track
	MaxEndpoints *wrapperspb.Int32Value `protobuf:"bytes,2,opt,name=max_endpoints,json=maxEndpoints,proto3" json:"max_endpoints,omitempty"`
	// config for printing endpoint metrics in logs
	Logging *MetricsLogConfig `protobuf:"bytes,3,opt,name=logging,proto3" json:"logging,omitempty"`
}

func (x *EndpointMetricsConfig) Reset() {
	*x = EndpointMetricsConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_traceable_agent_config_v1_config_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndpointMetricsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndpointMetricsConfig) ProtoMessage() {}

func (x *EndpointMetricsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_ai_traceable_agent_config_v1_config_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndpointMetricsConfig.ProtoReflect.Descriptor instead.
func (*EndpointMetricsConfig) Descriptor() ([]byte, []int) {
	return file_ai_traceable_agent_config_v1_config_proto_rawDescGZIP(), []int{13}
}

func (x *EndpointMetricsConfig) GetEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *EndpointMetricsConfig) GetMaxEndpoints() *wrapperspb.Int32Value {
	if x != nil {
		return x.MaxEndpoints
	}
	return nil
}

func (x *EndpointMetricsConfig) GetLogging() *MetricsLogConfig {
	if x != nil {
		return x.Logging
	}
	return nil
}

type MetricsConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// set this flag to enable metrics
	Enabled *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// endpoint level configuration
	EndpointConfig *EndpointMetricsConfig `protobuf:"bytes,2,opt,name=endpoint_config,json=endpointConfig,proto3" json:"endpoint_config,omitempty"`
	// config for printing metrics in logs
	Logging *MetricsLogConfig `protobuf:"bytes,3,opt,name=logging,proto3" json:"logging,omitempty"`
	// config for exporting metrics to Traceable Platform
	Exporter *MetricsExporterConfig `protobuf:"bytes,4,opt,name=exporter,proto3" json:"exporter,omitempty"`
	// max length for metrics queue
	QueueSize *wrapperspb.Int32Value `protobuf:"bytes,5,opt,name=queue_size,json=queueSize,proto3" json:"queue_size,omitempty"`
}

func (x *MetricsConfig) Reset() {
	*x = MetricsConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_traceable_agent_config_v1_config_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsConfig) ProtoMessage() {}

func (x *MetricsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_ai_traceable_agent_config_v1_config_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsConfig.ProtoReflect.Descriptor instead.
func (*MetricsConfig) Descriptor() ([]byte, []int) {
	return file_ai_traceable_agent_config_v1_config_proto_rawDescGZIP(), []int{14}
}

func (x *MetricsConfig) GetEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *MetricsConfig) GetEndpointConfig() *EndpointMetricsConfig {
	if x != nil {
		return x.EndpointConfig
	}
	return nil
}

func (x *MetricsConfig) GetLogging() *MetricsLogConfig {
	if x != nil {
		return x.Logging
	}
	return nil
}

func (x *MetricsConfig) GetExporter() *MetricsExporterConfig {
	if x != nil {
		return x.Exporter
	}
	return nil
}

func (x *MetricsConfig) GetQueueSize() *wrapperspb.Int32Value {
	if x != nil {
		return x.QueueSize
	}
	return nil
}

type RateLimitConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// set this flag to enable rate limiter
	Enabled *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// total number of requests to be rate limited in a given time window
	MaxCountGlobal *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=max_count_global,json=maxCountGlobal,proto3" json:"max_count_global,omitempty"`
	// number of requests per endpoint to be rate limited in a given time window
	MaxCountPerEndpoint *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=max_count_per_endpoint,json=maxCountPerEndpoint,proto3" json:"max_count_per_endpoint,omitempty"`
	// set the interval for rate limiter buckets to be reset. Examples are '1s', '2m', '3h'.
	RefreshPeriod *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=refresh_period,json=refreshPeriod,proto3" json:"refresh_period,omitempty"`
	// set the interval for rate limiter cache to be reset. Examples are '1s', '2m', '3h'.
	ValueExpirationPeriod *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=value_expiration_period,json=valueExpirationPeriod,proto3" json:"value_expiration_period,omitempty"`
	// set the span type for rate limited spans
	SpanType SpanType `protobuf:"varint,6,opt,name=span_type,json=spanType,proto3,enum=ai.traceable.agent.config.v1.SpanType" json:"span_type,omitempty"`
}

func (x *RateLimitConfig) Reset() {
	*x = RateLimitConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_traceable_agent_config_v1_config_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateLimitConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimitConfig) ProtoMessage() {}

func (x *RateLimitConfig) ProtoReflect() protoreflect.Message {
	mi := &file_ai_traceable_agent_config_v1_config_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimitConfig.ProtoReflect.Descriptor instead.
func (*RateLimitConfig) Descriptor() ([]byte, []int) {
	return file_ai_traceable_agent_config_v1_config_proto_rawDescGZIP(), []int{15}
}

func (x *RateLimitConfig) GetEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *RateLimitConfig) GetMaxCountGlobal() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxCountGlobal
	}
	return nil
}

func (x *RateLimitConfig) GetMaxCountPerEndpoint() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxCountPerEndpoint
	}
	return nil
}

func (x *RateLimitConfig) GetRefreshPeriod() *wrapperspb.StringValue {
	if x != nil {
		return x.RefreshPeriod
	}
	return nil
}

func (x *RateLimitConfig) GetValueExpirationPeriod() *wrapperspb.StringValue {
	if x != nil {
		return x.ValueExpirationPeriod
	}
	return nil
}

func (x *RateLimitConfig) GetSpanType() SpanType {
	if x != nil {
		return x.SpanType
	}
	return SpanType_SPAN_TYPE_UNSPECIFIED
}

type EdgeDecisionServiceConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// when `true` EdgeDecisionService based evaluation is enabled to block requests
	Enabled *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// endpoint represents the endpoint of the EdgeDecisionService
	Endpoint *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// max timeout for calls to EdgeDecisionService
	TimeoutMs *wrapperspb.Int32Value `protobuf:"bytes,3,opt,name=timeout_ms,json=timeoutMs,proto3" json:"timeout_ms,omitempty"`
	// specify regexes which will be matched with http.url attribute to do EdgeDecisionService evaluation.
	IncludePathRegexes []*wrapperspb.StringValue `protobuf:"bytes,4,rep,name=include_path_regexes,json=includePathRegexes,proto3" json:"include_path_regexes,omitempty"`
	// specify regexes which will be matched with http.url attribute to exclude spans from EdgeDecisionService evaluation.
	ExcludePathRegexes []*wrapperspb.StringValue `protobuf:"bytes,5,rep,name=exclude_path_regexes,json=excludePathRegexes,proto3" json:"exclude_path_regexes,omitempty"`
}

func (x *EdgeDecisionServiceConfig) Reset() {
	*x = EdgeDecisionServiceConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_traceable_agent_config_v1_config_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EdgeDecisionServiceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EdgeDecisionServiceConfig) ProtoMessage() {}

func (x *EdgeDecisionServiceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_ai_traceable_agent_config_v1_config_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EdgeDecisionServiceConfig.ProtoReflect.Descriptor instead.
func (*EdgeDecisionServiceConfig) Descriptor() ([]byte, []int) {
	return file_ai_traceable_agent_config_v1_config_proto_rawDescGZIP(), []int{16}
}

func (x *EdgeDecisionServiceConfig) GetEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *EdgeDecisionServiceConfig) GetEndpoint() *wrapperspb.StringValue {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

func (x *EdgeDecisionServiceConfig) GetTimeoutMs() *wrapperspb.Int32Value {
	if x != nil {
		return x.TimeoutMs
	}
	return nil
}

func (x *EdgeDecisionServiceConfig) GetIncludePathRegexes() []*wrapperspb.StringValue {
	if x != nil {
		return x.IncludePathRegexes
	}
	return nil
}

func (x *EdgeDecisionServiceConfig) GetExcludePathRegexes() []*wrapperspb.StringValue {
	if x != nil {
		return x.ExcludePathRegexes
	}
	return nil
}

// Message describes what message should be considered for certain DataCapture option
type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// when `false` it disables the capture for the request in a client/request operation
	Request *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	// when `false` it disables the capture for the response in a client/request operation
	Response *wrapperspb.BoolValue `protobuf:"bytes,2,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_traceable_agent_config_v1_config_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_ai_traceable_agent_config_v1_config_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_ai_traceable_agent_config_v1_config_proto_rawDescGZIP(), []int{17}
}

func (x *Message) GetRequest() *wrapperspb.BoolValue {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *Message) GetResponse() *wrapperspb.BoolValue {
	if x != nil {
		return x.Response
	}
	return nil
}

// DataCapture describes the elements to be captured by the agent instrumentation
type DataCapture struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// http_headers enables/disables the capture of the request/response headers in HTTP
	HttpHeaders *Message `protobuf:"bytes,1,opt,name=http_headers,json=httpHeaders,proto3" json:"http_headers,omitempty"`
	// http_body enables/disables the capture of the request/response body in HTTP
	HttpBody *Message `protobuf:"bytes,2,opt,name=http_body,json=httpBody,proto3" json:"http_body,omitempty"`
	// rpc_metadata enables/disables the capture of the request/response metadata in RPC
	RpcMetadata *Message `protobuf:"bytes,3,opt,name=rpc_metadata,json=rpcMetadata,proto3" json:"rpc_metadata,omitempty"`
	// rpc_body enables/disables the capture of the request/response body in RPC
	RpcBody *Message `protobuf:"bytes,4,opt,name=rpc_body,json=rpcBody,proto3" json:"rpc_body,omitempty"`
	// body_max_size_bytes is the maximum size of captured body in bytes.
	// Default should be 131_072 (128 KiB).
	BodyMaxSizeBytes *wrapperspb.Int32Value `protobuf:"bytes,5,opt,name=body_max_size_bytes,json=bodyMaxSizeBytes,proto3" json:"body_max_size_bytes,omitempty"`
	// body_max_processing_size_bytes is maximum size of body being processed by filters in bytes.
	// Default should be 1_048_576 (1MB).
	//
	// For uncompressed bodies we capture all bytes up to `body_max_processing_size_bytes`
	// in memory and pass that through the filter.
	// For compressed and GRPC bodies, if the size of the body is larger than this, we ignore
	// it entirely, otherwise we decompress/decode the body and then pass it to the filter.
	BodyMaxProcessingSizeBytes *wrapperspb.Int32Value `protobuf:"bytes,6,opt,name=body_max_processing_size_bytes,json=bodyMaxProcessingSizeBytes,proto3" json:"body_max_processing_size_bytes,omitempty"`
	// Array of allowed content type substrings to record
	// default should be json, x-www-form-urlencoded
	// ex: ["json"] will record any request bodies that have a content-type header that includes "json"
	AllowedContentTypes []*wrapperspb.StringValue `protobuf:"bytes,10,rep,name=allowed_content_types,json=allowedContentTypes,proto3" json:"allowed_content_types,omitempty"`
}

func (x *DataCapture) Reset() {
	*x = DataCapture{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_traceable_agent_config_v1_config_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataCapture) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataCapture) ProtoMessage() {}

func (x *DataCapture) ProtoReflect() protoreflect.Message {
	mi := &file_ai_traceable_agent_config_v1_config_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataCapture.ProtoReflect.Descriptor instead.
func (*DataCapture) Descriptor() ([]byte, []int) {
	return file_ai_traceable_agent_config_v1_config_proto_rawDescGZIP(), []int{18}
}

func (x *DataCapture) GetHttpHeaders() *Message {
	if x != nil {
		return x.HttpHeaders
	}
	return nil
}

func (x *DataCapture) GetHttpBody() *Message {
	if x != nil {
		return x.HttpBody
	}
	return nil
}

func (x *DataCapture) GetRpcMetadata() *Message {
	if x != nil {
		return x.RpcMetadata
	}
	return nil
}

func (x *DataCapture) GetRpcBody() *Message {
	if x != nil {
		return x.RpcBody
	}
	return nil
}

func (x *DataCapture) GetBodyMaxSizeBytes() *wrapperspb.Int32Value {
	if x != nil {
		return x.BodyMaxSizeBytes
	}
	return nil
}

func (x *DataCapture) GetBodyMaxProcessingSizeBytes() *wrapperspb.Int32Value {
	if x != nil {
		return x.BodyMaxProcessingSizeBytes
	}
	return nil
}

func (x *DataCapture) GetAllowedContentTypes() []*wrapperspb.StringValue {
	if x != nil {
		return x.AllowedContentTypes
	}
	return nil
}

// GoAgent has the configs specific to goagent
type GoAgent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// use the custom batch_span_processor adapted from the one in opentelemetry go
	// and supports some additional metrics
	UseCustomBsp *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=use_custom_bsp,json=useCustomBsp,proto3" json:"use_custom_bsp,omitempty"`
}

func (x *GoAgent) Reset() {
	*x = GoAgent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_traceable_agent_config_v1_config_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoAgent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoAgent) ProtoMessage() {}

func (x *GoAgent) ProtoReflect() protoreflect.Message {
	mi := &file_ai_traceable_agent_config_v1_config_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoAgent.ProtoReflect.Descriptor instead.
func (*GoAgent) Descriptor() ([]byte, []int) {
	return file_ai_traceable_agent_config_v1_config_proto_rawDescGZIP(), []int{19}
}

func (x *GoAgent) GetUseCustomBsp() *wrapperspb.BoolValue {
	if x != nil {
		return x.UseCustomBsp
	}
	return nil
}

// Telemetry has config for agent telemetry: traces and metrics on agent's
// performance and events.
type Telemetry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// when `true`, an internal span is created and exported when the agent is initialized and started.
	// It's useful to denote when the application the agent is in started.
	StartupSpanEnabled *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=startup_span_enabled,json=startupSpanEnabled,proto3" json:"startup_span_enabled,omitempty"`
	// Whether to capture metrics or not. The metrics will be otel go metrics.
	// See https://github.com/open-telemetry/opentelemetry-go/tree/main/metric
	MetricsEnabled *wrapperspb.BoolValue `protobuf:"bytes,2,opt,name=metrics_enabled,json=metricsEnabled,proto3" json:"metrics_enabled,omitempty"`
}

func (x *Telemetry) Reset() {
	*x = Telemetry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_traceable_agent_config_v1_config_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Telemetry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Telemetry) ProtoMessage() {}

func (x *Telemetry) ProtoReflect() protoreflect.Message {
	mi := &file_ai_traceable_agent_config_v1_config_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Telemetry.ProtoReflect.Descriptor instead.
func (*Telemetry) Descriptor() ([]byte, []int) {
	return file_ai_traceable_agent_config_v1_config_proto_rawDescGZIP(), []int{20}
}

func (x *Telemetry) GetStartupSpanEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.StartupSpanEnabled
	}
	return nil
}

func (x *Telemetry) GetMetricsEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.MetricsEnabled
	}
	return nil
}

type MetricsExporterConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// when `true` metrics will be exported as spans from libtraceable
	Enabled *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// max interval for calls to TPA
	ExportIntervalMs *wrapperspb.Int32Value `protobuf:"bytes,2,opt,name=export_interval_ms,json=exportIntervalMs,proto3" json:"export_interval_ms,omitempty"`
	// max timeout for calls to TPA
	ExportTimeoutMs *wrapperspb.Int32Value `protobuf:"bytes,3,opt,name=export_timeout_ms,json=exportTimeoutMs,proto3" json:"export_timeout_ms,omitempty"`
}

func (x *MetricsExporterConfig) Reset() {
	*x = MetricsExporterConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_traceable_agent_config_v1_config_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricsExporterConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsExporterConfig) ProtoMessage() {}

func (x *MetricsExporterConfig) ProtoReflect() protoreflect.Message {
	mi := &file_ai_traceable_agent_config_v1_config_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsExporterConfig.ProtoReflect.Descriptor instead.
func (*MetricsExporterConfig) Descriptor() ([]byte, []int) {
	return file_ai_traceable_agent_config_v1_config_proto_rawDescGZIP(), []int{21}
}

func (x *MetricsExporterConfig) GetEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *MetricsExporterConfig) GetExportIntervalMs() *wrapperspb.Int32Value {
	if x != nil {
		return x.ExportIntervalMs
	}
	return nil
}

func (x *MetricsExporterConfig) GetExportTimeoutMs() *wrapperspb.Int32Value {
	if x != nil {
		return x.ExportTimeoutMs
	}
	return nil
}

var File_ai_traceable_agent_config_v1_config_proto protoreflect.FileDescriptor

var file_ai_traceable_agent_config_v1_config_proto_rawDesc = []byte{
	0x0a, 0x29, 0x61, 0x69, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x2f, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x61, 0x69, 0x2e,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9f, 0x0b, 0x0a, 0x0b, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x37, 0x0a, 0x03, 0x6f, 0x70, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x61, 0x42, 0x02, 0x18, 0x01, 0x52, 0x03, 0x6f,
	0x70, 0x61, 0x12, 0x55, 0x0a, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x69,
	0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3b, 0x0a, 0x09, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x08, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x4c, 0x6f, 0x67, 0x12, 0x4f, 0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x61, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x59, 0x0a, 0x0d, 0x61, 0x70, 0x69, 0x5f, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x61, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70,
	0x69, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x0c, 0x61, 0x70, 0x69, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x12, 0x48, 0x0a, 0x08, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x08, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x45, 0x0a, 0x09,
	0x6a, 0x61, 0x76, 0x61, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x61, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4a,
	0x61, 0x76, 0x61, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x6a, 0x61, 0x76, 0x61, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x6c,
	0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x52, 0x0a, 0x0e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x61, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3e, 0x0a, 0x0b, 0x65, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x09, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x61, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x4c, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x61, 0x70, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x69, 0x2e, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x61, 0x70, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x60, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2f, 0x2e,
	0x61, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f,
	0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x12,
	0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x72, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18,
	0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x61, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x09,
	0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x61, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x09, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x12, 0x3f, 0x0a, 0x07, 0x67, 0x6f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x67, 0x6f, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x1a, 0x45, 0x0a, 0x17, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8b, 0x05, 0x0a, 0x09,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x38, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x06, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x5f, 0x0a, 0x13, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x61, 0x69, 0x2e, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x09,
	0x63, 0x65, 0x72, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x63,
	0x65, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x45, 0x0a, 0x0f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x62,
	0x0a, 0x14, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x61,
	0x69, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x12,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x56, 0x0a, 0x19, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x67, 0x72, 0x70,
	0x63, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x17, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x72, 0x70, 0x63, 0x4c, 0x6f, 0x61,
	0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x12, 0x3d, 0x0a, 0x0b, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xcd, 0x02, 0x0a, 0x03, 0x4f, 0x70,
	0x61, 0x12, 0x34, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x4b, 0x0a, 0x13, 0x70, 0x6f, 0x6c, 0x6c, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x70, 0x6f, 0x6c,
	0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x39,
	0x0a, 0x09, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x08, 0x63, 0x65, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x4e, 0x0a, 0x15, 0x75, 0x73, 0x65,
	0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x75, 0x73, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xeb, 0x06, 0x0a, 0x0e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x34, 0x0a, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x3b, 0x0a, 0x09, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x6c, 0x6f, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x08, 0x64, 0x65, 0x62, 0x75, 0x67, 0x4c, 0x6f, 0x67, 0x12,
	0x51, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x6d, 0x6f, 0x64, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x3f, 0x0a, 0x0d, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x5f, 0x62,
	0x6f, 0x64, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x42,
	0x6f, 0x64, 0x79, 0x12, 0x5b, 0x0a, 0x0f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61,
	0x69, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x0e, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67,
	0x12, 0x53, 0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x69, 0x2e, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4e, 0x0a, 0x15, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x13, 0x73, 0x6b, 0x69, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x14, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x12, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x4b, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x63, 0x75,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11,
	0x6d, 0x61, 0x78, 0x52, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x74,
	0x68, 0x12, 0x47, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x6b, 0x0a, 0x15, 0x65, 0x64,
	0x67, 0x65, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x61, 0x69, 0x2e, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x44, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x13, 0x65, 0x64, 0x67, 0x65, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x49, 0x0a, 0x11, 0x4d, 0x6f, 0x64, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x34, 0x0a, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x22, 0x4c, 0x0a, 0x14, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x34, 0x0a, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x22, 0xb0, 0x03, 0x0a, 0x0c, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x34, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x4b, 0x0a, 0x13, 0x70, 0x6f, 0x6c, 0x6c, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x70, 0x6f, 0x6c,
	0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x39,
	0x0a, 0x09, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x08, 0x63, 0x65, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x58, 0x0a, 0x1b, 0x67, 0x72, 0x70,
	0x63, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x76, 0x5f,
	0x6d, 0x73, 0x67, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x67, 0x72, 0x70,
	0x63, 0x4d, 0x61, 0x78, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x63, 0x76, 0x4d, 0x73, 0x67, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x4e, 0x0a, 0x15, 0x75, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13,
	0x75, 0x73, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x4a, 0x0a, 0x12, 0x41, 0x70, 0x69, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x34, 0x0a, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22,
	0xb0, 0x01, 0x0a, 0x0e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x34, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x68, 0x0a, 0x19, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x69,
	0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x16, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x22, 0x99, 0x01, 0x0a, 0x09, 0x4a, 0x61, 0x76, 0x61, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x12, 0x44, 0x0a, 0x10, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6a, 0x6b, 0x73, 0x5f, 0x63,
	0x65, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4a, 0x6b,
	0x73, 0x43, 0x65, 0x72, 0x74, 0x73, 0x12, 0x46, 0x0a, 0x10, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x5f, 0x6a, 0x61, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4a, 0x61, 0x72, 0x50, 0x61, 0x74, 0x68, 0x73, 0x22, 0xda,
	0x01, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x40, 0x0a, 0x08,
	0x6c, 0x6f, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25,
	0x2e, 0x61, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f,
	0x67, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x43,
	0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x26, 0x2e, 0x61, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x46, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x22, 0xc5, 0x01, 0x0a, 0x0d,
	0x4c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x38, 0x0a,
	0x09, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6d,
	0x61, 0x78, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6d, 0x61, 0x78,
	0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x22, 0x84, 0x01, 0x0a, 0x10, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x4c,
	0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x34, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x3a,
	0x0a, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x22, 0xd9, 0x01, 0x0a, 0x15, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x34, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x0d, 0x6d, 0x61,
	0x78, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c,
	0x6d, 0x61, 0x78, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x48, 0x0a, 0x07,
	0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x61, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x6c,
	0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x22, 0xfa, 0x02, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x34, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x5c,
	0x0a, 0x0f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x61, 0x69, 0x2e, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x48, 0x0a, 0x07,
	0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x61, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x6c,
	0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x4f, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x61, 0x69, 0x2e, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x08, 0x65,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x71, 0x75, 0x65, 0x75, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x22, 0xc0, 0x03, 0x0a, 0x0f, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x34, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x45, 0x0a,
	0x10, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x12, 0x50, 0x0a, 0x16, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x0e, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x72, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x54, 0x0a, 0x17, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x12, 0x43, 0x0a, 0x09, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x61, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x73, 0x70,
	0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0xe7, 0x02, 0x0a, 0x19, 0x45, 0x64, 0x67, 0x65, 0x44,
	0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x34, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f,
	0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x73,
	0x12, 0x4e, 0x0a, 0x14, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x67, 0x65, 0x78, 0x65, 0x73,
	0x12, 0x4e, 0x0a, 0x14, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x65, 0x78,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x67, 0x65, 0x78, 0x65, 0x73,
	0x22, 0x77, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x36, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa6, 0x04, 0x0a, 0x0b, 0x44, 0x61,
	0x74, 0x61, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x12, 0x48, 0x0a, 0x0c, 0x68, 0x74, 0x74,
	0x70, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x61, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x42, 0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x62, 0x6f, 0x64, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x68,
	0x74, 0x74, 0x70, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x48, 0x0a, 0x0c, 0x72, 0x70, 0x63, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x61, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x72, 0x70, 0x63, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x40, 0x0a, 0x08, 0x72, 0x70, 0x63, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x72, 0x70, 0x63, 0x42,
	0x6f, 0x64, 0x79, 0x12, 0x4a, 0x0a, 0x13, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x6d, 0x61, 0x78, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x62,
	0x6f, 0x64, 0x79, 0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x5f, 0x0a, 0x1e, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x1a, 0x62, 0x6f, 0x64, 0x79, 0x4d, 0x61, 0x78, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x50, 0x0a, 0x15, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x22, 0x4b, 0x0a, 0x07, 0x47, 0x6f, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x40, 0x0a,
	0x0e, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x62, 0x73, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x42, 0x73, 0x70, 0x22,
	0x9e, 0x01, 0x0a, 0x09, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x12, 0x4c, 0x0a,
	0x14, 0x73, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x5f, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x73, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70,
	0x53, 0x70, 0x61, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x43, 0x0a, 0x0f, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x22, 0xe1, 0x01, 0x0a, 0x15, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x34, 0x0a, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x49, 0x0a, 0x12, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x5f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x65, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x73, 0x12, 0x47, 0x0a, 0x11, 0x65,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x4d, 0x73, 0x2a, 0x5e, 0x0a, 0x07, 0x4c, 0x6f, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x14, 0x4c, 0x4f, 0x47, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x4f, 0x47,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f,
	0x4c, 0x4f, 0x47, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x54, 0x44, 0x4f, 0x55, 0x54, 0x10,
	0x02, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x4f, 0x47, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x46, 0x49,
	0x4c, 0x45, 0x10, 0x03, 0x2a, 0xa4, 0x01, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x19, 0x0a, 0x15, 0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f,
	0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x45, 0x10,
	0x01, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x44,
	0x45, 0x42, 0x55, 0x47, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45,
	0x56, 0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x4f,
	0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x57, 0x41, 0x52, 0x4e, 0x10, 0x04, 0x12, 0x13,
	0x0a, 0x0f, 0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c,
	0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x06, 0x2a, 0x6e, 0x0a, 0x08, 0x53,
	0x70, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x50, 0x41, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x50, 0x41, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4e, 0x4f, 0x5f, 0x53, 0x50, 0x41, 0x4e, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x50, 0x41,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x52, 0x45, 0x5f, 0x53, 0x50, 0x41, 0x4e,
	0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x50, 0x41, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x53, 0x50, 0x41, 0x4e, 0x10, 0x03, 0x2a, 0x2d, 0x0a, 0x11, 0x50,
	0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x12, 0x06, 0x0a, 0x02, 0x42, 0x33, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x52, 0x41, 0x43,
	0x45, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x58, 0x54, 0x10, 0x01, 0x2a, 0x60, 0x0a, 0x11, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x5a, 0x49, 0x50, 0x4b, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04,
	0x4f, 0x54, 0x4c, 0x50, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x4f, 0x47, 0x47, 0x49, 0x4e,
	0x47, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x04, 0x12, 0x0d, 0x0a,
	0x09, 0x4f, 0x54, 0x4c, 0x50, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x10, 0x05, 0x2a, 0xbf, 0x01, 0x0a,
	0x12, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x20, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x52, 0x45,
	0x50, 0x4f, 0x52, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x45, 0x54,
	0x52, 0x49, 0x43, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4f, 0x54, 0x4c, 0x50, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x45, 0x54, 0x52,
	0x49, 0x43, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x50, 0x52, 0x4f, 0x4d, 0x45, 0x54, 0x48, 0x45, 0x55, 0x53, 0x10, 0x02, 0x12, 0x20, 0x0a,
	0x1c, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x52,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x47, 0x47, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12,
	0x1d, 0x0a, 0x19, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54,
	0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x04, 0x42, 0x4b,
	0x5a, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x61, 0x69, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2d, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x76, 0x31, 0xaa,
	0x02, 0x19, 0x54, 0x72, 0x61, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_ai_traceable_agent_config_v1_config_proto_rawDescOnce sync.Once
	file_ai_traceable_agent_config_v1_config_proto_rawDescData = file_ai_traceable_agent_config_v1_config_proto_rawDesc
)

func file_ai_traceable_agent_config_v1_config_proto_rawDescGZIP() []byte {
	file_ai_traceable_agent_config_v1_config_proto_rawDescOnce.Do(func() {
		file_ai_traceable_agent_config_v1_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_ai_traceable_agent_config_v1_config_proto_rawDescData)
	})
	return file_ai_traceable_agent_config_v1_config_proto_rawDescData
}

var file_ai_traceable_agent_config_v1_config_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_ai_traceable_agent_config_v1_config_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_ai_traceable_agent_config_v1_config_proto_goTypes = []any{
	(LogMode)(0),                      // 0: ai.traceable.agent.config.v1.LogMode
	(LogLevel)(0),                     // 1: ai.traceable.agent.config.v1.LogLevel
	(SpanType)(0),                     // 2: ai.traceable.agent.config.v1.SpanType
	(PropagationFormat)(0),            // 3: ai.traceable.agent.config.v1.PropagationFormat
	(TraceReporterType)(0),            // 4: ai.traceable.agent.config.v1.TraceReporterType
	(MetricReporterType)(0),           // 5: ai.traceable.agent.config.v1.MetricReporterType
	(*AgentConfig)(nil),               // 6: ai.traceable.agent.config.v1.AgentConfig
	(*Reporting)(nil),                 // 7: ai.traceable.agent.config.v1.Reporting
	(*Opa)(nil),                       // 8: ai.traceable.agent.config.v1.Opa
	(*BlockingConfig)(nil),            // 9: ai.traceable.agent.config.v1.BlockingConfig
	(*ModsecurityConfig)(nil),         // 10: ai.traceable.agent.config.v1.ModsecurityConfig
	(*RegionBlockingConfig)(nil),      // 11: ai.traceable.agent.config.v1.RegionBlockingConfig
	(*RemoteConfig)(nil),              // 12: ai.traceable.agent.config.v1.RemoteConfig
	(*ApiDiscoveryConfig)(nil),        // 13: ai.traceable.agent.config.v1.ApiDiscoveryConfig
	(*SamplingConfig)(nil),            // 14: ai.traceable.agent.config.v1.SamplingConfig
	(*Javaagent)(nil),                 // 15: ai.traceable.agent.config.v1.Javaagent
	(*LogConfig)(nil),                 // 16: ai.traceable.agent.config.v1.LogConfig
	(*LogFileConfig)(nil),             // 17: ai.traceable.agent.config.v1.LogFileConfig
	(*MetricsLogConfig)(nil),          // 18: ai.traceable.agent.config.v1.MetricsLogConfig
	(*EndpointMetricsConfig)(nil),     // 19: ai.traceable.agent.config.v1.EndpointMetricsConfig
	(*MetricsConfig)(nil),             // 20: ai.traceable.agent.config.v1.MetricsConfig
	(*RateLimitConfig)(nil),           // 21: ai.traceable.agent.config.v1.RateLimitConfig
	(*EdgeDecisionServiceConfig)(nil), // 22: ai.traceable.agent.config.v1.EdgeDecisionServiceConfig
	(*Message)(nil),                   // 23: ai.traceable.agent.config.v1.Message
	(*DataCapture)(nil),               // 24: ai.traceable.agent.config.v1.DataCapture
	(*GoAgent)(nil),                   // 25: ai.traceable.agent.config.v1.GoAgent
	(*Telemetry)(nil),                 // 26: ai.traceable.agent.config.v1.Telemetry
	(*MetricsExporterConfig)(nil),     // 27: ai.traceable.agent.config.v1.MetricsExporterConfig
	nil,                               // 28: ai.traceable.agent.config.v1.AgentConfig.ResourceAttributesEntry
	(*wrapperspb.BoolValue)(nil),      // 29: google.protobuf.BoolValue
	(*wrapperspb.StringValue)(nil),    // 30: google.protobuf.StringValue
	(*wrapperspb.Int32Value)(nil),     // 31: google.protobuf.Int32Value
	(*wrapperspb.Int64Value)(nil),     // 32: google.protobuf.Int64Value
}
var file_ai_traceable_agent_config_v1_config_proto_depIdxs = []int32{
	8,  // 0: ai.traceable.agent.config.v1.AgentConfig.opa:type_name -> ai.traceable.agent.config.v1.Opa
	9,  // 1: ai.traceable.agent.config.v1.AgentConfig.blocking_config:type_name -> ai.traceable.agent.config.v1.BlockingConfig
	29, // 2: ai.traceable.agent.config.v1.AgentConfig.debug_log:type_name -> google.protobuf.BoolValue
	12, // 3: ai.traceable.agent.config.v1.AgentConfig.remote_config:type_name -> ai.traceable.agent.config.v1.RemoteConfig
	13, // 4: ai.traceable.agent.config.v1.AgentConfig.api_discovery:type_name -> ai.traceable.agent.config.v1.ApiDiscoveryConfig
	14, // 5: ai.traceable.agent.config.v1.AgentConfig.sampling:type_name -> ai.traceable.agent.config.v1.SamplingConfig
	15, // 6: ai.traceable.agent.config.v1.AgentConfig.javaagent:type_name -> ai.traceable.agent.config.v1.Javaagent
	16, // 7: ai.traceable.agent.config.v1.AgentConfig.logging:type_name -> ai.traceable.agent.config.v1.LogConfig
	20, // 8: ai.traceable.agent.config.v1.AgentConfig.metrics_config:type_name -> ai.traceable.agent.config.v1.MetricsConfig
	30, // 9: ai.traceable.agent.config.v1.AgentConfig.environment:type_name -> google.protobuf.StringValue
	30, // 10: ai.traceable.agent.config.v1.AgentConfig.service_name:type_name -> google.protobuf.StringValue
	7,  // 11: ai.traceable.agent.config.v1.AgentConfig.reporting:type_name -> ai.traceable.agent.config.v1.Reporting
	24, // 12: ai.traceable.agent.config.v1.AgentConfig.data_capture:type_name -> ai.traceable.agent.config.v1.DataCapture
	3,  // 13: ai.traceable.agent.config.v1.AgentConfig.propagation_formats:type_name -> ai.traceable.agent.config.v1.PropagationFormat
	29, // 14: ai.traceable.agent.config.v1.AgentConfig.enabled:type_name -> google.protobuf.BoolValue
	28, // 15: ai.traceable.agent.config.v1.AgentConfig.resource_attributes:type_name -> ai.traceable.agent.config.v1.AgentConfig.ResourceAttributesEntry
	26, // 16: ai.traceable.agent.config.v1.AgentConfig.telemetry:type_name -> ai.traceable.agent.config.v1.Telemetry
	25, // 17: ai.traceable.agent.config.v1.AgentConfig.goagent:type_name -> ai.traceable.agent.config.v1.GoAgent
	30, // 18: ai.traceable.agent.config.v1.Reporting.endpoint:type_name -> google.protobuf.StringValue
	29, // 19: ai.traceable.agent.config.v1.Reporting.secure:type_name -> google.protobuf.BoolValue
	30, // 20: ai.traceable.agent.config.v1.Reporting.token:type_name -> google.protobuf.StringValue
	4,  // 21: ai.traceable.agent.config.v1.Reporting.trace_reporter_type:type_name -> ai.traceable.agent.config.v1.TraceReporterType
	30, // 22: ai.traceable.agent.config.v1.Reporting.cert_file:type_name -> google.protobuf.StringValue
	30, // 23: ai.traceable.agent.config.v1.Reporting.metric_endpoint:type_name -> google.protobuf.StringValue
	5,  // 24: ai.traceable.agent.config.v1.Reporting.metric_reporter_type:type_name -> ai.traceable.agent.config.v1.MetricReporterType
	29, // 25: ai.traceable.agent.config.v1.Reporting.enable_grpc_loadbalancing:type_name -> google.protobuf.BoolValue
	30, // 26: ai.traceable.agent.config.v1.Reporting.agent_token:type_name -> google.protobuf.StringValue
	29, // 27: ai.traceable.agent.config.v1.Opa.enabled:type_name -> google.protobuf.BoolValue
	30, // 28: ai.traceable.agent.config.v1.Opa.endpoint:type_name -> google.protobuf.StringValue
	31, // 29: ai.traceable.agent.config.v1.Opa.poll_period_seconds:type_name -> google.protobuf.Int32Value
	30, // 30: ai.traceable.agent.config.v1.Opa.cert_file:type_name -> google.protobuf.StringValue
	29, // 31: ai.traceable.agent.config.v1.Opa.use_secure_connection:type_name -> google.protobuf.BoolValue
	29, // 32: ai.traceable.agent.config.v1.BlockingConfig.enabled:type_name -> google.protobuf.BoolValue
	29, // 33: ai.traceable.agent.config.v1.BlockingConfig.debug_log:type_name -> google.protobuf.BoolValue
	10, // 34: ai.traceable.agent.config.v1.BlockingConfig.modsecurity:type_name -> ai.traceable.agent.config.v1.ModsecurityConfig
	29, // 35: ai.traceable.agent.config.v1.BlockingConfig.evaluate_body:type_name -> google.protobuf.BoolValue
	11, // 36: ai.traceable.agent.config.v1.BlockingConfig.region_blocking:type_name -> ai.traceable.agent.config.v1.RegionBlockingConfig
	12, // 37: ai.traceable.agent.config.v1.BlockingConfig.remote_config:type_name -> ai.traceable.agent.config.v1.RemoteConfig
	29, // 38: ai.traceable.agent.config.v1.BlockingConfig.skip_internal_request:type_name -> google.protobuf.BoolValue
	31, // 39: ai.traceable.agent.config.v1.BlockingConfig.response_status_code:type_name -> google.protobuf.Int32Value
	31, // 40: ai.traceable.agent.config.v1.BlockingConfig.max_recursion_depth:type_name -> google.protobuf.Int32Value
	30, // 41: ai.traceable.agent.config.v1.BlockingConfig.response_message:type_name -> google.protobuf.StringValue
	22, // 42: ai.traceable.agent.config.v1.BlockingConfig.edge_decision_service:type_name -> ai.traceable.agent.config.v1.EdgeDecisionServiceConfig
	29, // 43: ai.traceable.agent.config.v1.ModsecurityConfig.enabled:type_name -> google.protobuf.BoolValue
	29, // 44: ai.traceable.agent.config.v1.RegionBlockingConfig.enabled:type_name -> google.protobuf.BoolValue
	29, // 45: ai.traceable.agent.config.v1.RemoteConfig.enabled:type_name -> google.protobuf.BoolValue
	30, // 46: ai.traceable.agent.config.v1.RemoteConfig.endpoint:type_name -> google.protobuf.StringValue
	31, // 47: ai.traceable.agent.config.v1.RemoteConfig.poll_period_seconds:type_name -> google.protobuf.Int32Value
	30, // 48: ai.traceable.agent.config.v1.RemoteConfig.cert_file:type_name -> google.protobuf.StringValue
	31, // 49: ai.traceable.agent.config.v1.RemoteConfig.grpc_max_call_recv_msg_size:type_name -> google.protobuf.Int32Value
	29, // 50: ai.traceable.agent.config.v1.RemoteConfig.use_secure_connection:type_name -> google.protobuf.BoolValue
	29, // 51: ai.traceable.agent.config.v1.ApiDiscoveryConfig.enabled:type_name -> google.protobuf.BoolValue
	29, // 52: ai.traceable.agent.config.v1.SamplingConfig.enabled:type_name -> google.protobuf.BoolValue
	21, // 53: ai.traceable.agent.config.v1.SamplingConfig.default_rate_limit_config:type_name -> ai.traceable.agent.config.v1.RateLimitConfig
	29, // 54: ai.traceable.agent.config.v1.Javaagent.import_jks_certs:type_name -> google.protobuf.BoolValue
	30, // 55: ai.traceable.agent.config.v1.Javaagent.filter_jar_paths:type_name -> google.protobuf.StringValue
	0,  // 56: ai.traceable.agent.config.v1.LogConfig.log_mode:type_name -> ai.traceable.agent.config.v1.LogMode
	1,  // 57: ai.traceable.agent.config.v1.LogConfig.log_level:type_name -> ai.traceable.agent.config.v1.LogLevel
	17, // 58: ai.traceable.agent.config.v1.LogConfig.log_file:type_name -> ai.traceable.agent.config.v1.LogFileConfig
	31, // 59: ai.traceable.agent.config.v1.LogFileConfig.max_files:type_name -> google.protobuf.Int32Value
	31, // 60: ai.traceable.agent.config.v1.LogFileConfig.max_file_size:type_name -> google.protobuf.Int32Value
	30, // 61: ai.traceable.agent.config.v1.LogFileConfig.file_path:type_name -> google.protobuf.StringValue
	29, // 62: ai.traceable.agent.config.v1.MetricsLogConfig.enabled:type_name -> google.protobuf.BoolValue
	30, // 63: ai.traceable.agent.config.v1.MetricsLogConfig.frequency:type_name -> google.protobuf.StringValue
	29, // 64: ai.traceable.agent.config.v1.EndpointMetricsConfig.enabled:type_name -> google.protobuf.BoolValue
	31, // 65: ai.traceable.agent.config.v1.EndpointMetricsConfig.max_endpoints:type_name -> google.protobuf.Int32Value
	18, // 66: ai.traceable.agent.config.v1.EndpointMetricsConfig.logging:type_name -> ai.traceable.agent.config.v1.MetricsLogConfig
	29, // 67: ai.traceable.agent.config.v1.MetricsConfig.enabled:type_name -> google.protobuf.BoolValue
	19, // 68: ai.traceable.agent.config.v1.MetricsConfig.endpoint_config:type_name -> ai.traceable.agent.config.v1.EndpointMetricsConfig
	18, // 69: ai.traceable.agent.config.v1.MetricsConfig.logging:type_name -> ai.traceable.agent.config.v1.MetricsLogConfig
	27, // 70: ai.traceable.agent.config.v1.MetricsConfig.exporter:type_name -> ai.traceable.agent.config.v1.MetricsExporterConfig
	31, // 71: ai.traceable.agent.config.v1.MetricsConfig.queue_size:type_name -> google.protobuf.Int32Value
	29, // 72: ai.traceable.agent.config.v1.RateLimitConfig.enabled:type_name -> google.protobuf.BoolValue
	32, // 73: ai.traceable.agent.config.v1.RateLimitConfig.max_count_global:type_name -> google.protobuf.Int64Value
	32, // 74: ai.traceable.agent.config.v1.RateLimitConfig.max_count_per_endpoint:type_name -> google.protobuf.Int64Value
	30, // 75: ai.traceable.agent.config.v1.RateLimitConfig.refresh_period:type_name -> google.protobuf.StringValue
	30, // 76: ai.traceable.agent.config.v1.RateLimitConfig.value_expiration_period:type_name -> google.protobuf.StringValue
	2,  // 77: ai.traceable.agent.config.v1.RateLimitConfig.span_type:type_name -> ai.traceable.agent.config.v1.SpanType
	29, // 78: ai.traceable.agent.config.v1.EdgeDecisionServiceConfig.enabled:type_name -> google.protobuf.BoolValue
	30, // 79: ai.traceable.agent.config.v1.EdgeDecisionServiceConfig.endpoint:type_name -> google.protobuf.StringValue
	31, // 80: ai.traceable.agent.config.v1.EdgeDecisionServiceConfig.timeout_ms:type_name -> google.protobuf.Int32Value
	30, // 81: ai.traceable.agent.config.v1.EdgeDecisionServiceConfig.include_path_regexes:type_name -> google.protobuf.StringValue
	30, // 82: ai.traceable.agent.config.v1.EdgeDecisionServiceConfig.exclude_path_regexes:type_name -> google.protobuf.StringValue
	29, // 83: ai.traceable.agent.config.v1.Message.request:type_name -> google.protobuf.BoolValue
	29, // 84: ai.traceable.agent.config.v1.Message.response:type_name -> google.protobuf.BoolValue
	23, // 85: ai.traceable.agent.config.v1.DataCapture.http_headers:type_name -> ai.traceable.agent.config.v1.Message
	23, // 86: ai.traceable.agent.config.v1.DataCapture.http_body:type_name -> ai.traceable.agent.config.v1.Message
	23, // 87: ai.traceable.agent.config.v1.DataCapture.rpc_metadata:type_name -> ai.traceable.agent.config.v1.Message
	23, // 88: ai.traceable.agent.config.v1.DataCapture.rpc_body:type_name -> ai.traceable.agent.config.v1.Message
	31, // 89: ai.traceable.agent.config.v1.DataCapture.body_max_size_bytes:type_name -> google.protobuf.Int32Value
	31, // 90: ai.traceable.agent.config.v1.DataCapture.body_max_processing_size_bytes:type_name -> google.protobuf.Int32Value
	30, // 91: ai.traceable.agent.config.v1.DataCapture.allowed_content_types:type_name -> google.protobuf.StringValue
	29, // 92: ai.traceable.agent.config.v1.GoAgent.use_custom_bsp:type_name -> google.protobuf.BoolValue
	29, // 93: ai.traceable.agent.config.v1.Telemetry.startup_span_enabled:type_name -> google.protobuf.BoolValue
	29, // 94: ai.traceable.agent.config.v1.Telemetry.metrics_enabled:type_name -> google.protobuf.BoolValue
	29, // 95: ai.traceable.agent.config.v1.MetricsExporterConfig.enabled:type_name -> google.protobuf.BoolValue
	31, // 96: ai.traceable.agent.config.v1.MetricsExporterConfig.export_interval_ms:type_name -> google.protobuf.Int32Value
	31, // 97: ai.traceable.agent.config.v1.MetricsExporterConfig.export_timeout_ms:type_name -> google.protobuf.Int32Value
	98, // [98:98] is the sub-list for method output_type
	98, // [98:98] is the sub-list for method input_type
	98, // [98:98] is the sub-list for extension type_name
	98, // [98:98] is the sub-list for extension extendee
	0,  // [0:98] is the sub-list for field type_name
}

func init() { file_ai_traceable_agent_config_v1_config_proto_init() }
func file_ai_traceable_agent_config_v1_config_proto_init() {
	if File_ai_traceable_agent_config_v1_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ai_traceable_agent_config_v1_config_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*AgentConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_traceable_agent_config_v1_config_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Reporting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_traceable_agent_config_v1_config_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*Opa); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_traceable_agent_config_v1_config_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*BlockingConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_traceable_agent_config_v1_config_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*ModsecurityConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_traceable_agent_config_v1_config_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*RegionBlockingConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_traceable_agent_config_v1_config_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*RemoteConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_traceable_agent_config_v1_config_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*ApiDiscoveryConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_traceable_agent_config_v1_config_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*SamplingConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_traceable_agent_config_v1_config_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*Javaagent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_traceable_agent_config_v1_config_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*LogConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_traceable_agent_config_v1_config_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*LogFileConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_traceable_agent_config_v1_config_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*MetricsLogConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_traceable_agent_config_v1_config_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*EndpointMetricsConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_traceable_agent_config_v1_config_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*MetricsConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_traceable_agent_config_v1_config_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*RateLimitConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_traceable_agent_config_v1_config_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*EdgeDecisionServiceConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_traceable_agent_config_v1_config_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_traceable_agent_config_v1_config_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*DataCapture); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_traceable_agent_config_v1_config_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*GoAgent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_traceable_agent_config_v1_config_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*Telemetry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_traceable_agent_config_v1_config_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*MetricsExporterConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ai_traceable_agent_config_v1_config_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ai_traceable_agent_config_v1_config_proto_goTypes,
		DependencyIndexes: file_ai_traceable_agent_config_v1_config_proto_depIdxs,
		EnumInfos:         file_ai_traceable_agent_config_v1_config_proto_enumTypes,
		MessageInfos:      file_ai_traceable_agent_config_v1_config_proto_msgTypes,
	}.Build()
	File_ai_traceable_agent_config_v1_config_proto = out.File
	file_ai_traceable_agent_config_v1_config_proto_rawDesc = nil
	file_ai_traceable_agent_config_v1_config_proto_goTypes = nil
	file_ai_traceable_agent_config_v1_config_proto_depIdxs = nil
}
