// Code generated by github.com/hypertrace/agent-config/tools/go-generator. DO NOT EDIT.

package v1

import wrappers "github.com/golang/protobuf/ptypes/wrappers"

// loadFromEnv loads the data from env vars, defaults and makes sure all values are initialized.
func (x *AgentConfig) loadFromEnv(prefix string, defaultValues *AgentConfig) {
	if x.Opa == nil {
		x.Opa = new(Opa)
	}
	if defaultValues == nil {
		x.Opa.loadFromEnv(prefix+"OPA_", nil)
	} else {
		x.Opa.loadFromEnv(prefix+"OPA_", defaultValues.Opa)
	}

	if x.BlockingConfig == nil {
		x.BlockingConfig = new(BlockingConfig)
	}
	if defaultValues == nil {
		x.BlockingConfig.loadFromEnv(prefix+"BLOCKING_CONFIG_", nil)
	} else {
		x.BlockingConfig.loadFromEnv(prefix+"BLOCKING_CONFIG_", defaultValues.BlockingConfig)
	}

}

// loadFromEnv loads the data from env vars, defaults and makes sure all values are initialized.
func (x *Opa) loadFromEnv(prefix string, defaultValues *Opa) {
	if val, ok := getBoolEnv(prefix + "ENABLED"); ok {
		x.Enabled = &wrappers.BoolValue{Value: val}
	} else if x.Enabled == nil {
		// when there is no value to set we still prefer to initialize the variable to avoid
		// `nil` checks in the consumers.
		x.Enabled = new(wrappers.BoolValue)
		if defaultValues != nil && defaultValues.Enabled != nil {
			x.Enabled = &wrappers.BoolValue{Value: defaultValues.Enabled.Value}
		}
	}
	if val, ok := getStringEnv(prefix + "ENDPOINT"); ok {
		x.Endpoint = &wrappers.StringValue{Value: val}
	} else if x.Endpoint == nil {
		// when there is no value to set we still prefer to initialize the variable to avoid
		// `nil` checks in the consumers.
		x.Endpoint = new(wrappers.StringValue)
		if defaultValues != nil && defaultValues.Endpoint != nil {
			x.Endpoint = &wrappers.StringValue{Value: defaultValues.Endpoint.Value}
		}
	}
	if val, ok := getInt32Env(prefix + "POLL_PERIOD_SECONDS"); ok {
		x.PollPeriodSeconds = &wrappers.Int32Value{Value: val}
	} else if x.PollPeriodSeconds == nil {
		// when there is no value to set we still prefer to initialize the variable to avoid
		// `nil` checks in the consumers.
		x.PollPeriodSeconds = new(wrappers.Int32Value)
		if defaultValues != nil && defaultValues.PollPeriodSeconds != nil {
			x.PollPeriodSeconds = &wrappers.Int32Value{Value: defaultValues.PollPeriodSeconds.Value}
		}
	}
}

// loadFromEnv loads the data from env vars, defaults and makes sure all values are initialized.
func (x *BlockingConfig) loadFromEnv(prefix string, defaultValues *BlockingConfig) {
	if val, ok := getBoolEnv(prefix + "ENABLED"); ok {
		x.Enabled = &wrappers.BoolValue{Value: val}
	} else if x.Enabled == nil {
		// when there is no value to set we still prefer to initialize the variable to avoid
		// `nil` checks in the consumers.
		x.Enabled = new(wrappers.BoolValue)
		if defaultValues != nil && defaultValues.Enabled != nil {
			x.Enabled = &wrappers.BoolValue{Value: defaultValues.Enabled.Value}
		}
	}
	if val, ok := getBoolEnv(prefix + "DEBUG_LOG"); ok {
		x.DebugLog = &wrappers.BoolValue{Value: val}
	} else if x.DebugLog == nil {
		// when there is no value to set we still prefer to initialize the variable to avoid
		// `nil` checks in the consumers.
		x.DebugLog = new(wrappers.BoolValue)
		if defaultValues != nil && defaultValues.DebugLog != nil {
			x.DebugLog = &wrappers.BoolValue{Value: defaultValues.DebugLog.Value}
		}
	}
	if x.Modsecurity == nil {
		x.Modsecurity = new(ModsecurityConfig)
	}
	if defaultValues == nil {
		x.Modsecurity.loadFromEnv(prefix+"MODSECURITY_", nil)
	} else {
		x.Modsecurity.loadFromEnv(prefix+"MODSECURITY_", defaultValues.Modsecurity)
	}

	if val, ok := getBoolEnv(prefix + "EVALUATE_BODY"); ok {
		x.EvaluateBody = &wrappers.BoolValue{Value: val}
	} else if x.EvaluateBody == nil {
		// when there is no value to set we still prefer to initialize the variable to avoid
		// `nil` checks in the consumers.
		x.EvaluateBody = new(wrappers.BoolValue)
		if defaultValues != nil && defaultValues.EvaluateBody != nil {
			x.EvaluateBody = &wrappers.BoolValue{Value: defaultValues.EvaluateBody.Value}
		}
	}
	if x.RegionBlocking == nil {
		x.RegionBlocking = new(RegionBlockingConfig)
	}
	if defaultValues == nil {
		x.RegionBlocking.loadFromEnv(prefix+"REGION_BLOCKING_", nil)
	} else {
		x.RegionBlocking.loadFromEnv(prefix+"REGION_BLOCKING_", defaultValues.RegionBlocking)
	}

	if x.RemoteConfig == nil {
		x.RemoteConfig = new(RemoteConfig)
	}
	if defaultValues == nil {
		x.RemoteConfig.loadFromEnv(prefix+"REMOTE_CONFIG_", nil)
	} else {
		x.RemoteConfig.loadFromEnv(prefix+"REMOTE_CONFIG_", defaultValues.RemoteConfig)
	}

}

// loadFromEnv loads the data from env vars, defaults and makes sure all values are initialized.
func (x *ModsecurityConfig) loadFromEnv(prefix string, defaultValues *ModsecurityConfig) {
	if val, ok := getBoolEnv(prefix + "ENABLED"); ok {
		x.Enabled = &wrappers.BoolValue{Value: val}
	} else if x.Enabled == nil {
		// when there is no value to set we still prefer to initialize the variable to avoid
		// `nil` checks in the consumers.
		x.Enabled = new(wrappers.BoolValue)
		if defaultValues != nil && defaultValues.Enabled != nil {
			x.Enabled = &wrappers.BoolValue{Value: defaultValues.Enabled.Value}
		}
	}
}

// loadFromEnv loads the data from env vars, defaults and makes sure all values are initialized.
func (x *RegionBlockingConfig) loadFromEnv(prefix string, defaultValues *RegionBlockingConfig) {
	if val, ok := getBoolEnv(prefix + "ENABLED"); ok {
		x.Enabled = &wrappers.BoolValue{Value: val}
	} else if x.Enabled == nil {
		// when there is no value to set we still prefer to initialize the variable to avoid
		// `nil` checks in the consumers.
		x.Enabled = new(wrappers.BoolValue)
		if defaultValues != nil && defaultValues.Enabled != nil {
			x.Enabled = &wrappers.BoolValue{Value: defaultValues.Enabled.Value}
		}
	}
}

// loadFromEnv loads the data from env vars, defaults and makes sure all values are initialized.
func (x *RemoteConfig) loadFromEnv(prefix string, defaultValues *RemoteConfig) {
	if val, ok := getBoolEnv(prefix + "ENABLED"); ok {
		x.Enabled = &wrappers.BoolValue{Value: val}
	} else if x.Enabled == nil {
		// when there is no value to set we still prefer to initialize the variable to avoid
		// `nil` checks in the consumers.
		x.Enabled = new(wrappers.BoolValue)
		if defaultValues != nil && defaultValues.Enabled != nil {
			x.Enabled = &wrappers.BoolValue{Value: defaultValues.Enabled.Value}
		}
	}
	if val, ok := getStringEnv(prefix + "ENDPOINT"); ok {
		x.Endpoint = &wrappers.StringValue{Value: val}
	} else if x.Endpoint == nil {
		// when there is no value to set we still prefer to initialize the variable to avoid
		// `nil` checks in the consumers.
		x.Endpoint = new(wrappers.StringValue)
		if defaultValues != nil && defaultValues.Endpoint != nil {
			x.Endpoint = &wrappers.StringValue{Value: defaultValues.Endpoint.Value}
		}
	}
	if val, ok := getInt32Env(prefix + "POLL_PERIOD_SECONDS"); ok {
		x.PollPeriodSeconds = &wrappers.Int32Value{Value: val}
	} else if x.PollPeriodSeconds == nil {
		// when there is no value to set we still prefer to initialize the variable to avoid
		// `nil` checks in the consumers.
		x.PollPeriodSeconds = new(wrappers.Int32Value)
		if defaultValues != nil && defaultValues.PollPeriodSeconds != nil {
			x.PollPeriodSeconds = &wrappers.Int32Value{Value: defaultValues.PollPeriodSeconds.Value}
		}
	}
}
