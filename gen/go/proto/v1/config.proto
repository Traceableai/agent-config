syntax = "proto3";

package ai.traceable.agent.config.v1;

import "google/protobuf/wrappers.proto";

option go_package = "github.com/Traceableai/agent-config/gen/go/v1";
option csharp_namespace = "Traceable.Agent.Config.V1";

message AgentConfig {
  Opa opa = 1 [deprecated = true];
  BlockingConfig blocking_config = 2;
  google.protobuf.BoolValue debug_log = 3 [deprecated = true];
  RemoteConfig remote_config = 4;
  ApiDiscoveryConfig api_discovery = 5 [deprecated = true];
  SamplingConfig sampling = 6;
  // javaagent has the configs specific to javaagent
  Javaagent javaagent = 7;
  LogConfig logging = 8;
  MetricsConfig metrics_config = 9;
  // represents the environment name of agent
  google.protobuf.StringValue environment = 10;

  // From HT config
  google.protobuf.StringValue service_name = 11;

  // reporting holds the reporting settings for the agent
  Reporting reporting = 12;

  // data_capture describes the data being captured by instrumentation
  DataCapture data_capture = 13;

  // propagation_formats list the supported propagation formats
  repeated PropagationFormat propagation_formats = 14;

  // when `false`, disables the agent
  google.protobuf.BoolValue enabled = 15;

  // resource_attributes map define the static list of resources which is configured on the tracer
  map<string, string> resource_attributes = 16;

  // telemetry
  Telemetry telemetry = 17;

  // Goagent specific config
  GoAgent goagent = 18;

}

// Reporting covers the options related to the mechanics for sending data to the
// tracing server o collector.
message Reporting {
  // endpoint represents the endpoint for reporting the traces
  // For ZIPKIN reporter type use http://api.traceable.ai:9411/api/v2/spans
  // For OTLP reporter type use http://api.traceable.ai:4317
  google.protobuf.StringValue endpoint = 1;

  // when `true`, connects to endpoints over TLS.
  google.protobuf.BoolValue secure = 2;

  // user specific token to access Traceable API
  google.protobuf.StringValue token = 3;

  // reporter type for traces.
  TraceReporterType trace_reporter_type = 5;

  // Certificate file containing the CA to verify the server's certificate.
  // This is for private certificates.
  // If this is set then `secure` above should also be set to `true`.
  google.protobuf.StringValue cert_file = 6;

  // metric_endpoint represents the endpoint for reporting the metrics.
  // For OTLP metric reporter type use http://api.traceable.ai:4317
  google.protobuf.StringValue metric_endpoint = 7;

  // reporter type for metrics.
  MetricReporterType metric_reporter_type = 8;

  // When `true`, modifies grpc resolver to use dns instead of passthrough and configure round robin client side loadbalancing
  google.protobuf.BoolValue enable_grpc_loadbalancing = 9;
}

// Opa covers the options related to the mechanics for getting Open Policy Agent configuration file.
// The client should use secure and token option from reporting settings.
message Opa {
  // when `true` Open Policy Agent evaluation is enabled to block request
  google.protobuf.BoolValue enabled = 1;

  // endpoint represents the endpoint for polling OPA config file e.g. http://opa.traceableai:8181/
  google.protobuf.StringValue endpoint = 2;

  // poll period in seconds to query OPA service
  google.protobuf.Int32Value poll_period_seconds  = 3;

  // Certificate filename containing the CA to verify the server's certificate.
  // If this is non-empty, you shoulds `https` for the protocol in `endpoint` above. 
  google.protobuf.StringValue cert_file = 4;
  // set this flag to use https connection when the provided certificate path is empty
  google.protobuf.BoolValue use_secure_connection = 5;
}

// Blocking config
message BlockingConfig {
  google.protobuf.BoolValue enabled = 1;
  // debug_log has moved to top level
  google.protobuf.BoolValue debug_log = 2 [deprecated = true];
  ModsecurityConfig modsecurity = 3;
  google.protobuf.BoolValue evaluate_body = 4;
  RegionBlockingConfig region_blocking = 5;
  // remote_config has moved to top level
  RemoteConfig remote_config = 6 [deprecated = true];

  // when `true`, blocking evaluation will be skipped for internal requests i.e. requests coming
  // from private IPs
  google.protobuf.BoolValue skip_internal_request = 7;

  // Allows user to set a custom blocking status code value
  google.protobuf.Int32Value response_status_code = 8;

  // setting a maximum allowed depth for recursion while parsing combination policies
  google.protobuf.Int32Value max_recursion_depth = 9;

  // Allows user to set a custom blocking message
  google.protobuf.StringValue response_message = 10;

  // EdgeDecisionService based evaluator configuration
  EdgeDecisionServiceConfig edge_decision_service = 11;

  // When `true`, blocking evaluation will be done using Edge Decision Service first and the results
  // will be passed onto the internal evaluator. Only applicable for Traceable Edge deployments.
  google.protobuf.BoolValue evaluate_eds_first = 12;
}

message ModsecurityConfig {
  google.protobuf.BoolValue enabled = 1;
}

message RegionBlockingConfig {
  google.protobuf.BoolValue enabled = 1;
}

// RemoteConfig defines the remote endpoint where the config is fetched from
message RemoteConfig {
  // enabled denotes if config needs to be fetched from remote or not
  google.protobuf.BoolValue enabled = 1;
  // endpoint denotes the agentmanager endpoint to connect to for config. eg: localhost:5441
  google.protobuf.StringValue endpoint = 2;
  // poll period in seconds to query for config updates
  google.protobuf.Int32Value poll_period_seconds = 3;
  // Certificate filename containing the CA to verify the server's certificate.
  google.protobuf.StringValue cert_file = 4;
  google.protobuf.Int32Value grpc_max_call_recv_msg_size = 5;
  // set this flag to use https connection when the provided certificate path is empty
  google.protobuf.BoolValue use_secure_connection = 6;
}

message ApiDiscoveryConfig {
  google.protobuf.BoolValue enabled = 1;
}

message SamplingConfig {
  google.protobuf.BoolValue enabled = 1;
  RateLimitConfig default_rate_limit_config = 2;
}

message Javaagent {
  // set this flag to export certificates configured in JKS to libtraceable for making HTTPS connection to TPA.
  google.protobuf.BoolValue import_jks_certs = 1;
  repeated google.protobuf.StringValue filter_jar_paths = 2;
}

enum LogMode {
  LOG_MODE_UNSPECIFIED = 0;
  LOG_MODE_NONE = 1;
  LOG_MODE_STDOUT = 2;
  LOG_MODE_FILE = 3;
}

enum LogLevel {
  LOG_LEVEL_UNSPECIFIED = 0;
  LOG_LEVEL_TRACE = 1;
  LOG_LEVEL_DEBUG = 2;
  LOG_LEVEL_INFO = 3;
  LOG_LEVEL_WARN = 4;
  LOG_LEVEL_ERROR = 5;
  LOG_LEVEL_CRITICAL = 6;
}

message LogConfig {
  LogMode log_mode = 1;
  LogLevel log_level = 2;
  // if mode is LOG_MODE_FILE, provide this additional configuration
  LogFileConfig log_file = 3;
}

message LogFileConfig {
  // maximum number of log files to keep
  google.protobuf.Int32Value max_files = 1;
  // maximum file size of the log files. Default value is 10485760 (10MB).
  google.protobuf.Int32Value max_file_size = 2;
  // file path for the log file. Default value is /var/traceable/log/libtraceable.log
  google.protobuf.StringValue file_path = 3;
}

message MetricsLogConfig {
  // set this flag to print metrics in logs
  google.protobuf.BoolValue enabled = 1;
  // set the frequency at which metrics should be printed. Examples are '1s', '2m', '3h'. Default value is 30m
  google.protobuf.StringValue frequency = 2;
}

message EndpointMetricsConfig {
  // set this flag to enable endpoint level metrics
  google.protobuf.BoolValue enabled = 1;
  // set the max number of endpoints to track
  google.protobuf.Int32Value max_endpoints = 2;
  // config for printing endpoint metrics in logs
  MetricsLogConfig logging = 3;
}

message MetricsConfig {
  // set this flag to enable metrics
  google.protobuf.BoolValue enabled = 1;
  // endpoint level configuration
  EndpointMetricsConfig endpoint_config = 2;
  // config for printing metrics in logs
  MetricsLogConfig logging = 3;
  // config for exporting metrics to Traceable Platform
  MetricsExporterConfig exporter = 4;
  // max length for metrics queue
  google.protobuf.Int32Value max_queue_size = 5; 
}

enum SpanType {
  SPAN_TYPE_UNSPECIFIED = 0;
  SPAN_TYPE_NO_SPAN = 1;
  SPAN_TYPE_BARE_SPAN = 2;
  SPAN_TYPE_FULL_SPAN = 3;
}

message RateLimitConfig {
  // set this flag to enable rate limiter
  google.protobuf.BoolValue enabled = 1;
  // total number of requests to be rate limited in a given time window
  google.protobuf.Int64Value max_count_global = 2;
  // number of requests per endpoint to be rate limited in a given time window
  google.protobuf.Int64Value max_count_per_endpoint = 3;
  // set the interval for rate limiter buckets to be reset. Examples are '1s', '2m', '3h'. 
  google.protobuf.StringValue refresh_period = 4;
  // set the interval for rate limiter cache to be reset. Examples are '1s', '2m', '3h'. 
  google.protobuf.StringValue value_expiration_period = 5;
  // set the span type for rate limited spans
  SpanType span_type = 6;
}

message EdgeDecisionServiceConfig {
  // when `true` EdgeDecisionService based evaluation is enabled to block requests
  google.protobuf.BoolValue enabled = 1;
  // endpoint represents the endpoint of the EdgeDecisionService
  google.protobuf.StringValue endpoint = 2;
  // max timeout for calls to EdgeDecisionService
  google.protobuf.Int32Value timeout_ms  = 3;
  // specify regexes which will be matched with http.url attribute to do EdgeDecisionService evaluation.
  repeated google.protobuf.StringValue include_path_regexes = 4;
    // specify regexes which will be matched with http.url attribute to exclude spans from EdgeDecisionService evaluation.
  repeated google.protobuf.StringValue exclude_path_regexes = 5;
}

// Message describes what message should be considered for certain DataCapture option
message Message {
  // when `false` it disables the capture for the request in a client/request operation
  google.protobuf.BoolValue request = 1;

  // when `false` it disables the capture for the response in a client/request operation
  google.protobuf.BoolValue response = 2;
}

// DataCapture describes the elements to be captured by the agent instrumentation
message DataCapture {
  // http_headers enables/disables the capture of the request/response headers in HTTP
  Message http_headers = 1;

  // http_body enables/disables the capture of the request/response body in HTTP
  Message http_body = 2;

  // rpc_metadata enables/disables the capture of the request/response metadata in RPC
  Message rpc_metadata = 3;

  // rpc_body enables/disables the capture of the request/response body in RPC
  Message rpc_body = 4;

  // body_max_size_bytes is the maximum size of captured body in bytes.
  // Default should be 131_072 (128 KiB).
  google.protobuf.Int32Value body_max_size_bytes = 5;

  // body_max_processing_size_bytes is maximum size of body being processed by filters in bytes.
  // Default should be 1_048_576 (1MB).
  //
  // For uncompressed bodies we capture all bytes up to `body_max_processing_size_bytes`
  // in memory and pass that through the filter.
  // For compressed and GRPC bodies, if the size of the body is larger than this, we ignore
  // it entirely, otherwise we decompress/decode the body and then pass it to the filter.
  google.protobuf.Int32Value body_max_processing_size_bytes = 6;

  // Array of allowed content type substrings to record
  // default should be json, x-www-form-urlencoded
  // ex: ["json"] will record any request bodies that have a content-type header that includes "json"
  repeated google.protobuf.StringValue allowed_content_types = 10;
}

// PropagationFormat represents the propagation formats supported by agents
enum PropagationFormat {
  // B3 propagation format, agents should support both multi and single value formats
  // see https://github.com/openzipkin/b3-propagation
  B3 = 0;

  // W3C Propagation format
  // see https://www.w3.org/TR/trace-context/
  TRACECONTEXT = 1;
}

// TraceReporterType represents the reporting format for trace data.
enum TraceReporterType {

  // Default to none. Agent will use it's default reporting type
  UNSPECIFIED = 0;

  // Zipkin protobuf reporting format.
  // see https://github.com/openzipkin/zipkin-api
  ZIPKIN = 1;

  // OpenTelemetry protobuf reporting format.
  // see https://github.com/open-telemetry/opentelemetry-proto
  OTLP = 2;

  // Logging reporting format
  LOGGING = 3;

  // Disable trace reporting
  NONE = 4;

  // OTLP over http
  OTLP_HTTP = 5;
}

// MetricReporterType represents the reporting format for metric data.
enum MetricReporterType {

  // Default to none. Agent will use it's default reporting type
  METRIC_REPORTER_TYPE_UNSPECIFIED = 0;

  // OpenTelemetry protobuf reporting format.
  // see https://github.com/open-telemetry/opentelemetry-proto
  METRIC_REPORTER_TYPE_OTLP = 1;

  // Prometheus exposition format.
  // see https://github.com/prometheus/docs/blob/main/content/docs/instrumenting/exposition_formats.md
  METRIC_REPORTER_TYPE_PROMETHEUS = 2;

  // Logging reporting format
  METRIC_REPORTER_TYPE_LOGGING = 3;

  // Disable metric reporting
  METRIC_REPORTER_TYPE_NONE = 4;
}

// GoAgent has the configs specific to goagent
message GoAgent {
  // use the custom batch_span_processor adapted from the one in opentelemetry go
  // and supports some additional metrics
  google.protobuf.BoolValue use_custom_bsp = 1;
}

// Telemetry has config for agent telemetry: traces and metrics on agent's
// performance and events.
message Telemetry {
  // when `true`, an internal span is created and exported when the agent is initialized and started.
  // It's useful to denote when the application the agent is in started.
  google.protobuf.BoolValue startup_span_enabled = 1;

  // Whether to capture metrics or not. The metrics will be otel go metrics.
  // See https://github.com/open-telemetry/opentelemetry-go/tree/main/metric
  google.protobuf.BoolValue metrics_enabled = 2;
}

message MetricsExporterConfig {
  // when `true` metrics will be exported as spans from libtraceable
  google.protobuf.BoolValue enabled = 1;
  // max interval for calls to TPA
  google.protobuf.Int32Value export_interval_ms  = 2;
  // max timeout for calls to TPA
  google.protobuf.Int32Value export_timeout_ms  = 3;
}
